// Auto-generated by yarn workspace typescriptlang-org compile-index-examples
import React from "react"

const innerHTML = `<div class='code-container'><code><span style="color: #569CD6">const</span><span style="color: #D4D4D4"> <data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;}[]'>users</data-lsp> = [{ <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style="color: #CE9178">"Ahmed"</span><span style="color: #D4D4D4"> }, { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style="color: #CE9178">"Gemma"</span><span style="color: #D4D4D4"> }, { <data-lsp lsp='(property) name: string'>name</data-lsp>: </span><span style="color: #CE9178">"Jon"</span><span style="color: #D4D4D4"> }];</span>

<span style="color: #569CD6">const</span><span style="color: #D4D4D4"> <data-lsp lsp='const jon: {&amp;#13;    name: string;&amp;#13;} | undefined'>jon</data-lsp> = <data-lsp lsp='const users: {&amp;#13;    name: string;&amp;#13;}[]'>users</data-lsp>.<data-lsp lsp='(method) Array&amp;lt;{ name: string; }>.find(predicate: (value: {&amp;#13;    name: string;&amp;#13;}, index: number, obj: {&amp;#13;    name: string;&amp;#13;}[]) => unknown, thisArg?: any): {&amp;#13;    name: string;&amp;#13;} | undefined (+1 overload)'>find</data-lsp>((<data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;}'>u</data-lsp>) </span><span style="color: #569CD6">=&gt;</span><span style="color: #D4D4D4"> <data-lsp lsp='(parameter) u: {&amp;#13;    name: string;&amp;#13;}'>u</data-lsp>.<data-lsp lsp='(property) name: string'>name</data-lsp> === </span><span style="color: #CE9178">"jon"</span><span style="color: #D4D4D4">);</span>

<span style="color: #569CD6">if</span><span style="color: #D4D4D4"> (<data-lsp lsp='const jon: {&amp;#13;    name: string;&amp;#13;} | undefined'>jon</data-lsp>) {</span>
<span style="color: #D4D4D4">  <data-lsp lsp='var console: Console'>console</data-lsp>.<data-lsp lsp='(method) Console.log(...data: any[]): void'>log</data-lsp>(<data-lsp lsp='const jon: {&amp;#13;    name: string;&amp;#13;}'>jon</data-lsp>)</span>
<span style="color: #D4D4D4">} </span><span style="color: #569CD6">else</span><span style="color: #D4D4D4"> {</span>
<span style="color: #D4D4D4">  </span><span style="color: #569CD6">throw</span><span style="color: #D4D4D4"> </span><span style="color: #569CD6">new</span><span style="color: #D4D4D4"> <data-lsp lsp='var Error: ErrorConstructor&amp;#13;new (message?: string | undefined) => Error'>Error</data-lsp>(</span><span style="color: #CE9178">&apos;Could not find user "Jon"&apos;</span><span style="color: #D4D4D4">)</span>
<span style="color: #D4D4D4">}</span></code><a href='https://www.typescriptlang.org/play/#code/MYewdgzgLgBArhApgJwjAvDA2gbxmAQwFtEAuGAIgEEALEgEwpgF8AaGPQk8igcUSJECTNh3zEylAFLgRAXQDcAKCWhIsAFbgM8JKgB0AMwCWYegApzcAJQYAfPH1dEGdJgpawFa8qXHDMOaetjhKMDBqECAANoj60SAA5kHg1krMMIjRSBxhMFA0yCAA7viIpQCiyEXI5gDkAMIgcNH0+CCwJma6KNKydWnMSkA'>Try</a></div>`

export const CfaExample = () => <pre className='shiki twoslash lsp' dangerouslySetInnerHTML={{ __html: innerHTML }} />
