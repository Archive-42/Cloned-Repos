[
  {
    "code": "/// <reference types=\"node\" />\n\n// @ts-check\nimport fs from \"fs\"\nimport { execSync } from \"child_process\"\n\nconst fileToEdit = process.env.HUSKY_GIT_PARAMS!.split(\" \")[0]\nconst files = execSync(\"git status --porcelain\", { encoding: \"utf8\" })\n\nconst maps: any = {\n  \"spelltower/\": \"SPTWR\",\n  \"typeshift/\": \"TPSFT\",\n}\n\nconst prefixes = new Set()\nfiles.split(\"\\n\").forEach(f => {\n  const found = Object.keys(maps).find(prefix => f.includes(prefix))\n  if (found) prefixes.add(maps[found])\n})\n\nif (prefixes.size) {\n  const prefix = [...prefixes.values()].sort().join(\", \")\n  const msg = fs.readFileSync(fileToEdit, \"utf8\")\n  if (!msg.includes(prefix)) {\n    fs.writeFileSync(fileToEdit, `[${prefix}] ${msg}`)\n  }\n}",
    "extension": "ts",
    "highlights": [],
    "queries": [],
    "staticQuickInfos": [
      {
        "text": "(alias) module \"fs\"\nimport fs",
        "docs": "",
        "start": 52,
        "length": 2,
        "line": 3,
        "character": 7,
        "targetString": "fs"
      },
      {
        "text": "(alias) function execSync(command: string): Buffer (+3 overloads)\nimport execSync",
        "docs": "",
        "start": 74,
        "length": 8,
        "line": 4,
        "character": 9,
        "targetString": "execSync"
      },
      {
        "text": "const fileToEdit: string",
        "docs": "",
        "start": 113,
        "length": 10,
        "line": 6,
        "character": 6,
        "targetString": "fileToEdit"
      },
      {
        "text": "var process: NodeJS.Process",
        "docs": "",
        "start": 126,
        "length": 7,
        "line": 6,
        "character": 19,
        "targetString": "process"
      },
      {
        "text": "(property) NodeJS.Process.env: NodeJS.ProcessEnv",
        "docs": "",
        "start": 134,
        "length": 3,
        "line": 6,
        "character": 27,
        "targetString": "env"
      },
      {
        "text": "string | undefined",
        "start": 138,
        "length": 16,
        "line": 6,
        "character": 31,
        "targetString": "HUSKY_GIT_PARAMS"
      },
      {
        "text": "(method) String.split(separator: string | RegExp, limit?: number | undefined): string[] (+1 overload)",
        "docs": "Split a string into substrings using the specified separator and return them as an array.",
        "start": 156,
        "length": 5,
        "line": 6,
        "character": 49,
        "targetString": "split"
      },
      {
        "text": "const files: string",
        "docs": "",
        "start": 176,
        "length": 5,
        "line": 7,
        "character": 6,
        "targetString": "files"
      },
      {
        "text": "(alias) execSync(command: string, options?: ExecSyncOptionsWithStringEncoding | undefined): string (+3 overloads)\nimport execSync",
        "docs": "",
        "start": 184,
        "length": 8,
        "line": 7,
        "character": 14,
        "targetString": "execSync"
      },
      {
        "text": "(property) ExecSyncOptionsWithStringEncoding.encoding: BufferEncoding",
        "docs": "",
        "start": 221,
        "length": 8,
        "line": 7,
        "character": 51,
        "targetString": "encoding"
      },
      {
        "text": "const maps: any",
        "docs": "",
        "start": 248,
        "length": 4,
        "line": 9,
        "character": 6,
        "targetString": "maps"
      },
      {
        "text": "const prefixes: Set<unknown>",
        "docs": "",
        "start": 322,
        "length": 8,
        "line": 14,
        "character": 6,
        "targetString": "prefixes"
      },
      {
        "text": "var Set: SetConstructor\nnew <unknown>(iterable?: Iterable<unknown> | null | undefined) => Set<unknown> (+1 overload)",
        "docs": "",
        "start": 337,
        "length": 3,
        "line": 14,
        "character": 21,
        "targetString": "Set"
      },
      {
        "text": "const files: string",
        "docs": "",
        "start": 343,
        "length": 5,
        "line": 15,
        "character": 0,
        "targetString": "files"
      },
      {
        "text": "(method) String.split(separator: string | RegExp, limit?: number | undefined): string[] (+1 overload)",
        "docs": "Split a string into substrings using the specified separator and return them as an array.",
        "start": 349,
        "length": 5,
        "line": 15,
        "character": 6,
        "targetString": "split"
      },
      {
        "text": "(method) Array<string>.forEach(callbackfn: (value: string, index: number, array: string[]) => void, thisArg?: any): void",
        "docs": "Performs the specified action for each element in an array.",
        "start": 361,
        "length": 7,
        "line": 15,
        "character": 18,
        "targetString": "forEach"
      },
      {
        "text": "(parameter) f: string",
        "docs": "",
        "start": 369,
        "length": 1,
        "line": 15,
        "character": 26,
        "targetString": "f"
      },
      {
        "text": "const found: string | undefined",
        "docs": "",
        "start": 384,
        "length": 5,
        "line": 16,
        "character": 8,
        "targetString": "found"
      },
      {
        "text": "var Object: ObjectConstructor",
        "docs": "Provides functionality common to all JavaScript objects.",
        "start": 392,
        "length": 6,
        "line": 16,
        "character": 16,
        "targetString": "Object"
      },
      {
        "text": "(method) ObjectConstructor.keys(o: {}): string[] (+1 overload)",
        "docs": "Returns the names of the enumerable string properties and methods of an object.",
        "start": 399,
        "length": 4,
        "line": 16,
        "character": 23,
        "targetString": "keys"
      },
      {
        "text": "const maps: any",
        "docs": "",
        "start": 404,
        "length": 4,
        "line": 16,
        "character": 28,
        "targetString": "maps"
      },
      {
        "text": "(method) Array<string>.find(predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string | undefined (+1 overload)",
        "docs": "Returns the value of the first element in the array where predicate is true, and undefined\r\notherwise.",
        "start": 410,
        "length": 4,
        "line": 16,
        "character": 34,
        "targetString": "find"
      },
      {
        "text": "(parameter) prefix: string",
        "docs": "",
        "start": 415,
        "length": 6,
        "line": 16,
        "character": 39,
        "targetString": "prefix"
      },
      {
        "text": "(parameter) f: string",
        "docs": "",
        "start": 425,
        "length": 1,
        "line": 16,
        "character": 49,
        "targetString": "f"
      },
      {
        "text": "(method) String.includes(searchString: string, position?: number | undefined): boolean",
        "docs": "Returns true if searchString appears as a substring of the result of converting this\r\nobject to a String, at one or more positions that are\r\ngreater than or equal to position; otherwise, returns false.",
        "start": 427,
        "length": 8,
        "line": 16,
        "character": 51,
        "targetString": "includes"
      },
      {
        "text": "(parameter) prefix: string",
        "docs": "",
        "start": 436,
        "length": 6,
        "line": 16,
        "character": 60,
        "targetString": "prefix"
      },
      {
        "text": "const found: string | undefined",
        "docs": "",
        "start": 451,
        "length": 5,
        "line": 17,
        "character": 6,
        "targetString": "found"
      },
      {
        "text": "const prefixes: Set<unknown>",
        "docs": "",
        "start": 458,
        "length": 8,
        "line": 17,
        "character": 13,
        "targetString": "prefixes"
      },
      {
        "text": "(method) Set<unknown>.add(value: unknown): Set<unknown>",
        "docs": "",
        "start": 467,
        "length": 3,
        "line": 17,
        "character": 22,
        "targetString": "add"
      },
      {
        "text": "const maps: any",
        "docs": "",
        "start": 471,
        "length": 4,
        "line": 17,
        "character": 26,
        "targetString": "maps"
      },
      {
        "text": "const found: string",
        "docs": "",
        "start": 476,
        "length": 5,
        "line": 17,
        "character": 31,
        "targetString": "found"
      },
      {
        "text": "const prefixes: Set<unknown>",
        "docs": "",
        "start": 492,
        "length": 8,
        "line": 20,
        "character": 4,
        "targetString": "prefixes"
      },
      {
        "text": "(property) Set<unknown>.size: number",
        "docs": "",
        "start": 501,
        "length": 4,
        "line": 20,
        "character": 13,
        "targetString": "size"
      },
      {
        "text": "const prefix: string",
        "docs": "",
        "start": 517,
        "length": 6,
        "line": 21,
        "character": 8,
        "targetString": "prefix"
      },
      {
        "text": "const prefixes: Set<unknown>",
        "docs": "",
        "start": 530,
        "length": 8,
        "line": 21,
        "character": 21,
        "targetString": "prefixes"
      },
      {
        "text": "(method) Set<unknown>.values(): IterableIterator<unknown>",
        "docs": "Returns an iterable of values in the set.",
        "start": 539,
        "length": 6,
        "line": 21,
        "character": 30,
        "targetString": "values"
      },
      {
        "text": "(method) Array<unknown>.sort(compareFn?: ((a: unknown, b: unknown) => number) | undefined): unknown[]",
        "docs": "Sorts an array in place.\r\nThis method mutates the array and returns a reference to the same array.",
        "start": 549,
        "length": 4,
        "line": 21,
        "character": 40,
        "targetString": "sort"
      },
      {
        "text": "(method) Array<unknown>.join(separator?: string | undefined): string",
        "docs": "Adds all the elements of an array into a string, separated by the specified separator string.",
        "start": 556,
        "length": 4,
        "line": 21,
        "character": 47,
        "targetString": "join"
      },
      {
        "text": "const msg: string",
        "docs": "",
        "start": 575,
        "length": 3,
        "line": 22,
        "character": 8,
        "targetString": "msg"
      },
      {
        "text": "(alias) module \"fs\"\nimport fs",
        "docs": "",
        "start": 581,
        "length": 2,
        "line": 22,
        "character": 14,
        "targetString": "fs"
      },
      {
        "text": "function readFileSync(path: number | fs.PathLike, options: BufferEncoding | {\n    encoding: BufferEncoding;\n    flag?: string | undefined;\n}): string (+2 overloads)",
        "docs": "Synchronously reads the entire contents of a file.",
        "start": 584,
        "length": 12,
        "line": 22,
        "character": 17,
        "targetString": "readFileSync"
      },
      {
        "text": "const fileToEdit: string",
        "docs": "",
        "start": 597,
        "length": 10,
        "line": 22,
        "character": 30,
        "targetString": "fileToEdit"
      },
      {
        "text": "const msg: string",
        "docs": "",
        "start": 624,
        "length": 3,
        "line": 23,
        "character": 7,
        "targetString": "msg"
      },
      {
        "text": "(method) String.includes(searchString: string, position?: number | undefined): boolean",
        "docs": "Returns true if searchString appears as a substring of the result of converting this\r\nobject to a String, at one or more positions that are\r\ngreater than or equal to position; otherwise, returns false.",
        "start": 628,
        "length": 8,
        "line": 23,
        "character": 11,
        "targetString": "includes"
      },
      {
        "text": "const prefix: string",
        "docs": "",
        "start": 637,
        "length": 6,
        "line": 23,
        "character": 20,
        "targetString": "prefix"
      },
      {
        "text": "(alias) module \"fs\"\nimport fs",
        "docs": "",
        "start": 652,
        "length": 2,
        "line": 24,
        "character": 4,
        "targetString": "fs"
      },
      {
        "text": "function writeFileSync(path: number | fs.PathLike, data: string | NodeJS.ArrayBufferView, options?: fs.WriteFileOptions | undefined): void",
        "docs": "Synchronously writes data to a file, replacing the file if it already exists.",
        "start": 655,
        "length": 13,
        "line": 24,
        "character": 7,
        "targetString": "writeFileSync"
      },
      {
        "text": "const fileToEdit: string",
        "docs": "",
        "start": 669,
        "length": 10,
        "line": 24,
        "character": 21,
        "targetString": "fileToEdit"
      },
      {
        "text": "const prefix: string",
        "docs": "",
        "start": 685,
        "length": 6,
        "line": 24,
        "character": 37,
        "targetString": "prefix"
      },
      {
        "text": "const msg: string",
        "docs": "",
        "start": 696,
        "length": 3,
        "line": 24,
        "character": 48,
        "targetString": "msg"
      }
    ],
    "errors": [],
    "playgroundURL": "https://www.typescriptlang.org/play/#code/PQgEB4CcFMDNpgOwMbVAFwJ4AdoGcBeAIkQHsATaI0YAPgCh6wABdPAWmQAtpkBregEsAttlKR0oWHimRSw0EWlEho8ZIDeoaAA9eAZUwpQAX1nzF3QQBtyAfWxzUePCvrJSiPJNg3oAFVIAUXJBSQJQR1JnPAA6aEQAN1iACQBVfQBpAE07AHEASX87AAUAQQAlMoBZfQBCWLxsazCACmoiAEoAbQAGAF13T28pPxkI3QMjZHaAczDQbwBDdABXGXZ2MUhUayXBRCIAGlAtBI9QxFmALkVV9FgADmoTTsYPL0lhJew8W6XEJhQBENPRQIomtBrNZ0KQAO4IYBEW5EfQlfwAdQqxzBiiwuDwXEEsHQSJR-hK+gAYv4cSZ3sNJI44II9ONQIhoHDQPpoOhWm9fNZ8I1mm0iAAdQ6dWKwcRBJbcVqwYG0U64j4jOWrRDkYGgADyACMAFa8dCxPjQTB4VrfX4y3y61rM3w6VVSWIHZDWVaUW2u1mdN7g4mgZWkHXkTqRGBukVLcjkO0-PDdbW6-pvV6MMMuuOskV4QQAL2gMdB4M1TIL7oi3VijcDbNiiSWvvwAv6jXUAtiJtIB3aJy6GsZoGEeFm+uksRgiapfkMKGVfkCITCI-uT1HoZVrTqk9mXpQvv9+ZZOmD6vB4NncMgYWgi+Fy5mQoCwVC6BOAANugAJBozYmP0oBAUeJi-iGpj0CYQA"
  }
]
