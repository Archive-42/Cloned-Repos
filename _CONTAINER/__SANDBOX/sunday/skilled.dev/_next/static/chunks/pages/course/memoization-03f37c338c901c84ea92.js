_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[88],{"09kp":function(e,a,t){"use strict";t.r(a),t.d(a,"__N_SSG",(function(){return M}));var n=t("wx14"),o=t("q1tI"),c=t("NoRJ"),s=t("Qovc"),i=t("ekJs"),r={segments:[{name:"Introduction",startTimeSeconds:0,endTimeSeconds:26},{name:"Definition and Explanation",startTimeSeconds:26,endTimeSeconds:129},{name:"Basic Example",startTimeSeconds:129,endTimeSeconds:311},{name:"How Memoization Optimizes",startTimeSeconds:311,endTimeSeconds:611},{name:"Memoization Code Walkthrough",startTimeSeconds:611,endTimeSeconds:851},{name:"Memoization with Bottom-Up",startTimeSeconds:851,endTimeSeconds:898},{name:"Memoization in the Real World",startTimeSeconds:898,endTimeSeconds:959}]},m=t("Ff2n"),p=t("7ljp"),l=t("jkan"),u=t("93Pr"),d=(t("gWsq"),t("7dQm"),t("jDXR"),t("Ydbm")),b=t("rePB"),N=t("Utoj"),j=t("Jpar"),O={};function h(e){var a=e.components,t=Object(m.a)(e,["components"]);return Object(p.a)("wrapper",Object(n.a)({},O,t,{components:a,mdxType:"MDXLayout"}),Object(p.a)("pre",{className:"language-javascript"},Object(p.a)("code",{parentName:"pre",className:"language-javascript"},Object(p.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(p.a)("span",{parentName:"code",className:"token function-variable function"},"countByTwo")," ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(p.a)("span",{parentName:"code",className:"token parameter"},"n"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(p.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"let")," count ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(p.a)("span",{parentName:"code",className:"token number"},"0"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(p.a)("span",{parentName:"code",className:"token keyword"},"let")," i ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(p.a)("span",{parentName:"code",className:"token number"},"0"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";")," i ",Object(p.a)("span",{parentName:"code",className:"token operator"},"<=")," n",Object(p.a)("span",{parentName:"code",className:"token punctuation"},";")," i",Object(p.a)("span",{parentName:"code",className:"token operator"},"++"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    count ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," count ",Object(p.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(p.a)("span",{parentName:"code",className:"token number"},"2"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"return")," count",Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n")))}h.isMDXComponent=!0;var k=Object(b.a)({},N.a.Javascript,o.createElement(h,null)),f=Object(j.a)(k),w={};function g(e){var a=e.components,t=Object(m.a)(e,["components"]);return Object(p.a)("wrapper",Object(n.a)({},w,t,{components:a,mdxType:"MDXLayout"}),Object(p.a)("pre",{className:"language-javascript"},Object(p.a)("code",{parentName:"pre",className:"language-javascript"},Object(p.a)("span",{parentName:"code",className:"token keyword"},"const")," memo ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"{"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(p.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(p.a)("span",{parentName:"code",className:"token function-variable function"},"countByTwo")," ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(p.a)("span",{parentName:"code",className:"token parameter"},"n"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(p.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(p.a)("span",{parentName:"code",className:"token comment"},"// Check if we previously memoized the result and return early in O(1) time"),"\n  ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"("),"memo",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"["),"n",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"return")," memo",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"["),"n",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"let")," count ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(p.a)("span",{parentName:"code",className:"token number"},"0"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(p.a)("span",{parentName:"code",className:"token keyword"},"let")," i ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(p.a)("span",{parentName:"code",className:"token number"},"0"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";")," i ",Object(p.a)("span",{parentName:"code",className:"token operator"},"<=")," n",Object(p.a)("span",{parentName:"code",className:"token punctuation"},";")," i",Object(p.a)("span",{parentName:"code",className:"token operator"},"++"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    count ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," count ",Object(p.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(p.a)("span",{parentName:"code",className:"token number"},"2"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n    ",Object(p.a)("span",{parentName:"code",className:"token comment"},"// Store the result for this value"),"\n    ",Object(p.a)("span",{parentName:"code",className:"token comment"},"// It will return instantly if countByTwo is later called with one of these values"),"\n    memo",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"["),"i",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(p.a)("span",{parentName:"code",className:"token operator"},"=")," count",Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(p.a)("span",{parentName:"code",className:"token comment"},"// We calculated and stored this value (and all previous values) in the for loop"),"\n  ",Object(p.a)("span",{parentName:"code",className:"token keyword"},"return")," memo",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"["),"n",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(p.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(p.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n")))}g.isMDXComponent=!0;var v=Object(b.a)({},N.a.Javascript,o.createElement(g,null)),y=Object(j.a)(v),T=t("SFdv"),z=t("2tul"),x=t("+uJx"),C=t("HGY8"),S={};function E(e){var a=e.components,t=Object(m.a)(e,["components"]);return Object(p.a)("wrapper",Object(n.a)({},S,t,{components:a,mdxType:"MDXLayout"}),Object(p.a)(u.b,{mdxType:"Section"},Object(p.a)("p",null,Object(p.a)("strong",{parentName:"p"},"Memoization (a form of caching) is an optimization that stores the result from a function call or expensive calculation so that the code isn't executed more than once for the same input."),"\nLike many of our optimizations, we incur additional space to improve our time complexity."),Object(p.a)("p",null,"Memoization can be applied broadly in software engineering, but in interviews, we most often see it with dynamic programming for storing the results of subproblems."),Object(p.a)("h3",null,"Simple Example"),Object(p.a)("p",null,"For functions, we always expect them to return the same result when called with the same input.\nWith memoization, we store the result of a function call for a given input so that we can return immediately instead of recalculating the answer."),Object(p.a)("p",null,"The below example is contrived but still valuable to gain the insight.\nBefore memoizing, this function takes ",Object(p.a)(d.a.n,null)," time because we go from 0 to ",Object(p.a)("inlineCode",{parentName:"p"},"n")," every time we call the function."),Object(p.a)(f,{mdxType:"SimpleExample"}),Object(p.a)("p",null,"After we introduce memoization, it only takes ",Object(p.a)(d.a.n,null)," the first time we calculate the solution for a given input ",Object(p.a)("inlineCode",{parentName:"p"},"n"),".\nThen if we call the function again for any value of ",Object(p.a)("inlineCode",{parentName:"p"},"n")," we've already calculated, it will return immediately in ",Object(p.a)(d.a.constant,null)," time because we already know the solution."),Object(p.a)(y,{mdxType:"SimpleMemo"}),Object(p.a)("h3",null,"Memoization and Dynamic Programming"),Object(p.a)("p",null,"In dynamic programming, we build up our solution by solving subproblems with different function input values and combine the results to get our solution.\nWe use memoization to store the result for overlapping subproblems (problems called with the same input multiple times) so that we only have to perform the calculation once."),Object(p.a)("p",null,"Calculating Fibonacci numbers is a classic example of using dynamic programming and applying memoization.\nWithout memoization, it requires ~",Object(p.a)(d.a.bin,null)," time complexity."),Object(p.a)(T.a,{mdxType:"FibBasic"}),Object(p.a)("p",null,"Let's take a look at what is happening if we call ",Object(p.a)("inlineCode",{parentName:"p"},"fib(7)")," without memoization.\nThe number in the node is the input value for a recursive function call, and the tree represents how the recursive calls spawn additional calls.\nWe can see nodes containing the same input value appear many times which means they are overlapping subproblems trying to calculate the same solution.\nWithout memoization, we repeatedly solve for all the values each time."),Object(p.a)(l.a,{src:"/images/normalfib.png",isVisuAlgo:!0,mdxType:"Image"}),Object(p.a)("p",null,"Not only do we call the same function many times, but each time it also triggers additional recursive calls.\nIf we instead store the result of a function call, we can just use the memoized value that was previously calculated instead of going deeper into the recursive tree."),Object(p.a)("p",null,"For this problem, we use a hash table where the key is the input value ",Object(p.a)("inlineCode",{parentName:"p"},"n")," for the ",Object(p.a)("inlineCode",{parentName:"p"},"fib(n)")," function, and the value for the key is the solution Fibonacci number calculated for that value of ",Object(p.a)("inlineCode",{parentName:"p"},"n"),"."),Object(p.a)(l.a,{src:"/images/fib-memo-table.png",mdxType:"Image"}),Object(p.a)("p",null,"Which looks like:"),Object(p.a)(x.a,{mdxType:"MemoHashTable"}),Object(p.a)("p",null,"Translating this to code, we get the following:"),Object(p.a)(z.a,{mdxType:"FibMemo"}),Object(p.a)("p",null,"Now let's view our tree of recursive calls.\nThe nodes highlighted in blue are when we have a memoized value and would return in constant ",Object(p.a)(d.a.constant,null)," time.\nThe white nodes are the ones that calculate the result for that input for the first time.\nAfter calculating it for the first time, we store this result in the memoization data structure."),Object(p.a)(l.a,{src:"/images/memofib.png",isVisuAlgo:!0,mdxType:"Image"}),Object(p.a)("p",null,"In fact, the first time we encounter a memoized value (blue node), we immediately return the result stored and do not continue executing the recursion.\nThis eliminates ",Object(p.a)("em",{parentName:"p"},"many")," additional operations."),Object(p.a)(l.a,{src:"/images/memofib-unused.png",isVisuAlgo:!0,mdxType:"Image"}),Object(p.a)("p",null,"By using memoization, we improve our runtime from ",Object(p.a)(d.a.bin,null)," to ",Object(p.a)(d.a.n,null),".\nWith an ",Object(p.a)("inlineCode",{parentName:"p"},"n")," of 7, this is 41 opertions versus 13, and as our input size increases, the difference grows dramatically.\nIf we increase the input size to ",Object(p.a)("inlineCode",{parentName:"p"},"n = 25"),", it takes 242,785 operations for the non-memoized version versus only 49 for the memoized version."),Object(p.a)(l.a,{src:"/images/fibcompare.png",mdxType:"Image"}),Object(p.a)("p",null,"We can also memoize using a bottom-up approach.\nAgain we use a hash table to store the intermediate values.\nThen we look backward in the hash table to use previous results to calculate the current Fibonacci number for each iteration of the loop."),Object(p.a)(C.a,{mdxType:"FibonacciBottomUp"}),Object(p.a)("p",null,"Using a data structure is actually not required to calculate a solution for bottom-up Fibonacci since we can just store the previous two Fibonacci numbers in variables.\nHowever, very often in dynamic programming bottom-up solutions, you will need to construct a full table like this to solve your subproblems efficiently."),Object(p.a)("h3",null,"Memoization in Software Engineering"),Object(p.a)("p",null,'Not only do we see memoization in interviews, but memoization and caching are very common techniques used in production to keep our applications running fast.\nAnytime we calculate something "expensive" in our application, it is common to store this result instead of needing to recalculate it every time.'),Object(p.a)("ul",null,Object(p.a)("li",{parentName:"ul"},"The frontend uses memoization for UI state to prevent it from needing to re-render"),Object(p.a)("li",{parentName:"ul"},"The backend stores expensive calculations in memory"),Object(p.a)("li",{parentName:"ul"},"We cache frequent database queries in something like Redis to make the data immediately accessible"))))}E.isMDXComponent=!0;var I=function(e){return o.createElement(i.a,Object(n.a)({},e,{Content:E,video:r}))},M=!0;a.default=Object(s.a)((function(e){return o.useEffect((function(){e.lesson&&"ACTIVE"===e.lesson.status||(window.location.href="/course")}),[e]),e.lesson&&"ACTIVE"===e.lesson.status?o.createElement(c.a,Object(n.a)({},e,{Component:I})):null}),{ssr:!1})},"7dQm":function(e,a,t){"use strict";var n=t("q1tI"),o=t("uqmq"),c=t("D+/m"),s=function(e){var a=e.fill,t=void 0===a?"currentColor":a,s=e.stroke,i=void 0===s?"currentColor":s,r=e.children;return n.createElement(o.b,null,n.createElement(c.a,{stroke:i,fill:t},r))};a.a=s},"D+/m":function(e,a,t){"use strict";t.d(a,"a",(function(){return c})),t.d(a,"b",(function(){return s}));var n=t("vOnD"),o=Object(n.d)(["svg{color:",";fill:",";}path{color:",";stroke:",";}"],(function(e){return e.theme.color.textPrimary}),(function(e){var a=e.fill;return void 0===a?"currentColor":a}),(function(e){return e.theme.color.textPrimary}),(function(e){var a=e.stroke;return void 0===a?"currentColor":a})),c=n.e.div.withConfig({componentId:"sc-145zq7y-0"})(["color:",";display:flex;justify-content:center;",";"],(function(e){return e.theme.color.textPrimary}),o),s=n.e.div.withConfig({componentId:"sc-145zq7y-1"})(["",";svg{width:100%;height:100%;}"],o)},Ns7V:function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/course/memoization",function(){return t("09kp")}])}},[["Ns7V",0,1,4,6,5,9,12,11,13,14,15,18,17,2,3,7,8,10,16,19,20,36]]]);