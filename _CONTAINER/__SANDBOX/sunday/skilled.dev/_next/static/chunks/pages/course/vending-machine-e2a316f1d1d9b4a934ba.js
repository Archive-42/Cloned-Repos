_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[116],{jkan:function(e,a,n){"use strict";var t=n("q1tI"),o=n("vOnD"),c=n("uqmq"),s=n("5nwr"),p=Object(o.e)(c.b).withConfig({componentId:"sc-1u1nk7e-0"})(["display:flex;justify-content:center;align-items:center;flex-direction:column;"]),m=o.e.img.withConfig({componentId:"sc-1u1nk7e-1"})(["border-radius:6px;max-width:",";","{max-width:100% !important;}"],(function(e){var a=e.maxWidth;return a?"".concat(a," !important"):"100%"}),Object(s.b)()),r=o.e.div.withConfig({componentId:"sc-1u1nk7e-2"})(["margin-top:4px;font-size:12px;color:",";text-align:center;width:100%;a,a:hover,a:visited{color:",";text-decoration:underline;}"],(function(e){return e.theme.color.textSecondary}),(function(e){return e.theme.color.textSecondary})),i=function(){return t.createElement("span",null,"Credit:"," ",t.createElement("a",{href:"https://visualgo.net/",target:"_blank",rel:"noopener noreferrer"},"VisuAlgo"))},u=function(e){var a=e.src,n=e.credit,o=e.isVisuAlgo,c=e.maxWidth;return t.createElement(p,null,t.createElement(m,{maxWidth:c,src:a}),!!n&&t.createElement(r,null,n),!!o&&t.createElement(r,null,t.createElement(i,null)))};a.a=u},qlHD:function(e,a,n){"use strict";n.r(a),n.d(a,"__N_SSG",(function(){return Ue}));var t=n("wx14"),o=n("q1tI"),c=n("NoRJ"),s=n("Qovc"),p=n("gh+C"),m=n("kB7q"),r=n("Ff2n"),i=n("7ljp"),u=n("rePB"),l=n("Utoj"),N=n("Jpar"),b={};function d(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},b,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," denominations ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," targetChange ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"12"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token function"},"minCoinsForChange"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," targetChange",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Output: 3  --\x3e  1x10 + 2x1"),"\n\n",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," denominations ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"25"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," targetChange ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"53"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token function"},"minCoinsForChange"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," targetChange",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Output: -1"),"\n")))}d.isMDXComponent=!0;var j=Object(u.a)({},l.a.Javascript,o.createElement(d,null)),O=Object(N.a)(j),k={};function h(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},k,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)(O,{mdxType:"InputOutput"}))}h.isMDXComponent=!0;var g=n("JT+q"),w=Object(u.a)({},l.a.Javascript,"minCoinsForChange"),f=Object(g.a)(w),y={};function v(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},y,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"We're writing code for a vending machine and want to manage how we're handling change returned from payments.\nWe want to calculate the minimum number of coins to add up to a customer's change."),Object(i.a)("p",null,"This vending machine could be used anywhere in the world with any currency,\nso as an input, we'll also provide the denominations of coins available for change."),Object(i.a)("p",null,Object(i.a)("strong",{parentName:"p"},"Write a function ",Object(i.a)(f,{mdxType:"SolutionSignature"})," that returns an integer for the smallest number of coins required to make change. If a combination is not possible, return ",Object(i.a)("inlineCode",{parentName:"strong"},"-1"),".")),Object(i.a)("p",null,"Assume you have as much of any available denomination needed to solve the problem."),Object(i.a)(h,{mdxType:"SampleInputOutput"}))}v.isMDXComponent=!0;var C=v,x={};function T(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},x,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)(C,{mdxType:"QuestionStatement"}))}T.isMDXComponent=!0;var I=T,M={};function W(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},M,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"This can be solved either bottom-up or top-down.\nIn either case, the solutions are reasonable, so go with what you're most comfortable with."))}W.isMDXComponent=!0;var A={};function D(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},A,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"This can be completed using dynamic programming.\nYou can solve subproblems and use memoization to build up your solution."))}D.isMDXComponent=!0;var S=n("Ydbm"),F={};function X(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},F,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"This can be solved in ",Object(i.a)(S.a.n,{letter:"d x target"}),",\nwhere ",Object(i.a)("inlineCode",{parentName:"p"},"d = denominations.length")," and ",Object(i.a)("inlineCode",{parentName:"p"},"target")," is the actual value of the target."))}X.isMDXComponent=!0;var q=[W,D,X],L={};function E(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},L,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},"denominations ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"2"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"8"),"\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// bottom-up"),"\n",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"8"),"\n",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"8"),"\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// or"),"\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// top-down"),"\n",Object(i.a)("span",{parentName:"code",className:"token number"},"8")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),"\n",Object(i.a)("span",{parentName:"code",className:"token number"},"8")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),"\n")))}E.isMDXComponent=!0;var z=Object(u.a)({},l.a.Javascript,o.createElement(E,null)),V=Object(N.a)(z),J={};function R(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},J,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"This is one of those questions where candidates may not be sure where to start if they've never seen something similar before.\nIn a case like that, let's start with a simple example to get our intuition."),Object(i.a)("p",null,"Let's say we have a ",Object(i.a)("inlineCode",{parentName:"p"},"target = 8")," and ",Object(i.a)("inlineCode",{parentName:"p"},"denominations = [2, 3]"),"."),Object(i.a)(V,{mdxType:"ChangeSimple"}),Object(i.a)("p",null,"There are two ways to approach this, either summing up to the target (bottom-up) or starting with the target and working backward (top-down).\nWe'll walk through the bottom-up method first."),Object(i.a)("p",null,"So if you were to solve this by hand, how would you approach it?"),Object(i.a)("p",null,'We mentally start trying different combinations to reach different values below our target to eventually reach an amount that leads to our target.\nFor example you may have thought, "3 + 3 = 6 and then 6 + 2 = 8, so 3 coins is the minimum needed".\nOr you may have looked about it top-down where, "8 - 2 = 6, and then 6 - 3 - 3 = 0 which gives us the minimum number of coins."'),Object(i.a)("blockquote",null,Object(i.a)("p",{parentName:"blockquote"},"Try a larger example yourself to see how you think through one that is more complex.")),Object(i.a)("p",null,"What we're doing when we create these intermediate steps is actually solving subproblems in our head,\nand this is exactly how we will approach the question in our solution algorithm."))}R.isMDXComponent=!0;var _=n("jkan"),P=n("gWsq"),U={};function B(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},U,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"Solving for a ",Object(i.a)("inlineCode",{parentName:"p"},"target = 8")," with ",Object(i.a)("inlineCode",{parentName:"p"},"denominations = [2, 3]")," is pretty easy to do in our head.\nWe didn't have an issue maintaining all the combinations of denominations to find the minimum coins starting at 0 and summing to the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),".\nHowever, with more/larger denominations or a higher ",Object(i.a)("inlineCode",{parentName:"p"},"target"),", it will quickly get out of control.\nLet's walk through how we would solve this first example using dynamic programming."),Object(i.a)("p",null,Object(i.a)("strong",{parentName:"p"},"To solve this question, the subproblems are to find the minimum required coins for every ",Object(i.a)("inlineCode",{parentName:"strong"},"amount")," from ",Object(i.a)("inlineCode",{parentName:"strong"},"0")," to the ",Object(i.a)("inlineCode",{parentName:"strong"},"target"),"."),"\nThe only way to reach our target with the minimum number of coins is to find the minimum number of coins required to reach ",Object(i.a)("em",{parentName:"p"},"every")," amount below the ",Object(i.a)("inlineCode",{parentName:"p"},"target")," amount.\nSo for ",Object(i.a)("inlineCode",{parentName:"p"},"target = 8"),", we would find the minimum coins to reach ",Object(i.a)("inlineCode",{parentName:"p"},"[0, 1, 2, 3, 4, 5, 6, 7, 8]"),".\nTrying every possible combination of coins to reach our target may sound inefficient if you are new to dynamic programming,\nbut if we're smart about how we approach our subproblems, we can remove duplicate work."),Object(i.a)(_.a,{src:"/images/no-number-vending-machine.gif",mdxType:"Image"}),Object(i.a)("p",null,"To reach 8, we can get there from either 5 (5 + 3 = 8) or 6 (6 + 2 = 8).\nThis requires one additional coin in each case by adding either the 2 denomination or the 3 denomination.\nSo if we can find the minimum number of ways to reach both 5 and 6, we just need +1 additional coin from either spot to reach the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),"."),Object(i.a)(_.a,{src:"/images/vending-machine-one-coin-to-8.png",mdxType:"Image"}),Object(i.a)("p",null,"Using these ",Object(i.a)("inlineCode",{parentName:"p"},"denominations"),", there are two ways to reach 6 (4 + 2 or 3 + 3) and 5 (2 + 3 or 3 + 2).\nThen we need to find the minimum number of ways to reach those values."),Object(i.a)(_.a,{src:"/images/vending-machine-to-prior-coins.png",mdxType:"Image"}),Object(i.a)("p",null,"These are the subproblems we need to solve.\nTo find the minimum coins to reach ",Object(i.a)("inlineCode",{parentName:"p"},"target = 8"),", we need to know the minimum number of coins to reach a spot before it.\nThen to find the change combinations to reach these prior spots using the minimum number of coins, we need to know the minimum coins the amounts before them."),Object(i.a)("p",null,"We're going to do this bottom-up.\nWe'll start at 0 and find the minimum coins required to reach each ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," from 0 to 8.\nThe minimum coins required to reach any ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," depends on the minimum coins to reach prior amounts, so we memoize those so we can access them in future subproblems.\nThis ensures we calculate each step once and store the subproblem results which removes any duplicate work.\n",Object(i.a)("strong",{parentName:"p"},"Once we solve each of the subproblems locally, when we reach the ",Object(i.a)("inlineCode",{parentName:"strong"},"target")," and solve its subproblem, we will have calculated the solution globally and have the answer to the question.")),Object(i.a)("p",null,"We're going to memoize the solutions to subproblems in an array.\nThe indexes for the array are all the amounts from ",Object(i.a)("inlineCode",{parentName:"p"},"0")," to the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),".\nThe value stored at the index is the minimum coins required to reach this ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),"."),Object(i.a)(_.a,{src:"/images/vending-machine-table.png",mdxType:"Image"}),Object(i.a)("p",null,'To determine the minimum number of coins to reach any spot, we need to "look back" in the memoization array and determine the minimum coins to reach previous values.\nWe iterate through each ',Object(i.a)("inlineCode",{parentName:"p"},"amount")," and subtract each of the denominations from it to find prior minimum coin combinations.\nThen using a denomination would be adding ",Object(i.a)("inlineCode",{parentName:"p"},"+1")," additional coin to reach the current ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," from a previous value."),Object(i.a)(P.h,{mdxType:"Container"},Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token comment"},"// To look back"),"\ncurrent amount ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," denomination ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," prior amount\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Then find the min coins to reach this amount in the memo array"),"\nmemo",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"prior amount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," min coins to reach prior amount\n"))),Object(i.a)(_.a,{src:"/images/vending-machine-look-back.png",mdxType:"Image"}),Object(i.a)("p",null,"So how do we actually build up the minimum coins combinations in the ",Object(i.a)("inlineCode",{parentName:"p"},"memo")," array?"),Object(i.a)("p",null,"Let's quickly imagine we are ",Object(i.a)("em",{parentName:"p"},"only considering a denomination of 2")," and want to find the minimum coins to reach 8."),Object(i.a)(_.a,{src:"/images/vending-machine-2-coins.png",mdxType:"Image"}),Object(i.a)("p",null,"Using a denomination of only 2, we have the steps:"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"It takes 0 coins to reach 0 (base case / minimum value)"),Object(i.a)("li",{parentName:"ol"},"It takes 1 coin to reach 2"),Object(i.a)("li",{parentName:"ol"},"It takes 2 coins to reach 4"),Object(i.a)("li",{parentName:"ol"},"It takes 3 coins to reach 6"),Object(i.a)("li",{parentName:"ol"},"It takes 4 coins to reach 8")),Object(i.a)("p",null,"Let's consider the ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),' 6 from the table above.\nWe subtract our denomination of 2 to find the minimum coins required to reach a prior spot which is stored in the memoization array \u2014 this is our "look back".\n',Object(i.a)("inlineCode",{parentName:"p"},"6 - 2 = 4"),", and the minimum coins it took to reach the ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," 4 required 2 coins.\nWe're always trying to add 1 additional coin to a previous minimum coin subproblem solution, and in this instance the minimum coins to reach 6 is ",Object(i.a)("inlineCode",{parentName:"p"},"2 + 1"),"."),Object(i.a)(_.a,{src:"/images/vending-machine-subtract-coin.png",mdxType:"Image"}),Object(i.a)("p",null,"Every time we try to solve the subproblem for the minimum coins to reach the current ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),", we subtract each of our available denominations to find the minimum coins used to reach a prior ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),".\nWe move to the current value from a previous value by using one of our available denominations.\nSo we ",Object(i.a)("strong",{parentName:"p"},"always increment by +1 because we are trying to use 1 additional coin each time"),"."),Object(i.a)("p",null,"This is the foundation for the solution logic.\nWe just need to try all the possible ",Object(i.a)("inlineCode",{parentName:"p"},"denominations")," at each ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," from ",Object(i.a)("inlineCode",{parentName:"p"},"0")," to ",Object(i.a)("inlineCode",{parentName:"p"},"target")," and keep the combination that reached the current step using the minimum number of coins and store this subproblem solution in the memoization array."),Object(i.a)("p",null,"Now that we have some intuition, let's actually walk through the ",Object(i.a)("inlineCode",{parentName:"p"},"denominations = [2, 3], target = 8")," example step-by-step."))}B.isMDXComponent=!0;var H=n("7l9Y"),Y=n.n(H),Q=Object(u.a)({},l.a.Javascript,"Infinity"),G=Object(g.a)(Q),K=Object(u.a)({},l.a.Javascript,"Math.min"),Z=Object(g.a)(K),$=(n("93Pr"),{});function ee(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},$,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"We are going to try both denominations of 2 and 3 at each ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," from ",Object(i.a)("inlineCode",{parentName:"p"},"0")," to the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),".\nWe store the results in an array as we build up the solution."),Object(i.a)(_.a,{src:"/images/vending-machine-2-3-coins-empty.png",mdxType:"Image"}),Object(i.a)("p",null,"To track the minimum required coins, we'll create a memoization array with a length of ",Object(i.a)("inlineCode",{parentName:"p"},"target + 1")," which corresponds to every value from ",Object(i.a)("inlineCode",{parentName:"p"},"0")," to the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),".\nThis is the memoization array we're using for dynamic programming.\nWe set ",Object(i.a)("inlineCode",{parentName:"p"},"amount[0] = 0")," which is our smallest value and starting point since no coins can be combined to reach 0.\nWe initialize every other value to ",Object(i.a)(G,{mdxType:"LanguageMaxValue"}),",\nand this way when we calculate the minimum coins at an ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),", it's easy and intuitive to replace the default value since all numbers must be smaller than ",Object(i.a)(G,{mdxType:"LanguageMaxValue"}),"."),Object(i.a)("p",null,"At each ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),", we subtract ",Object(i.a)("inlineCode",{parentName:"p"},"-2")," and ",Object(i.a)("inlineCode",{parentName:"p"},"-3")," and see if there was a prior coin combination that can use either of these coins to reach the current value at this step.\nIf there is a valid combination, we just increment ",Object(i.a)("inlineCode",{parentName:"p"},"+1")," the minimum coins it took to reach a prior ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," since we are trying to add just 1 additional coin to this combination, allowing us to reach the current ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),"."),Object(i.a)("p",null,"If we have multiple valid coin combinations at an ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),", we just store the minimum in our array.\nFor example at 6, we can use ",Object(i.a)("inlineCode",{parentName:"p"},"2 + 2 + 2")," or ",Object(i.a)("inlineCode",{parentName:"p"},"3 + 3"),", so we store the minimum coins to be 2 in the memoization array which corresponds to ",Object(i.a)("inlineCode",{parentName:"p"},"3 + 3"),"."),Object(i.a)("p",null,"At each ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," for each denomination, we do something similar as the following:"),Object(i.a)(P.h,{mdxType:"Container"},Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},"memo",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"i",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token function"},"minimum"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"memo",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"i",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," prior spot min coins ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),"\n"))),Object(i.a)("p",null,"The entire solution:"),Object(i.a)(P.h,{style:{marginTop:"16px"},mdxType:"Container"},Object(i.a)(Y.a,Object(t.a)({},l.l,{width:"100%",url:"https://vimeo.com/468332705",mdxType:"ReactPlayer"}))),Object(i.a)("p",null,"The top table is just to visualize the possible combinations.\nAll we actually need to store in our question is the number of coins to reach an amount, which is the bottom table.\nWe don't actually care what the coins were, we just need to know that there was a valid combination and the number of coins used produced it."),Object(i.a)("p",null,"The logic step-by-step:"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"We start at 0 which is the base case of 0."),Object(i.a)("li",{parentName:"ol"},"We move to 1 and there is no valid combination of coins."),Object(i.a)("li",{parentName:"ol"},"At 2, subtract ",Object(i.a)("inlineCode",{parentName:"li"},"2 - 2 = 0"),". The min coins for 0 is 0, and we increment it to 1 for using a single 2 denomination."),Object(i.a)("li",{parentName:"ol"},"At 3, we have 1 coin which is using the 3 denomination ",Object(i.a)("inlineCode",{parentName:"li"},"3 - 3 = 0"),"."),Object(i.a)("li",{parentName:"ol"},"At 4, subtract ",Object(i.a)("inlineCode",{parentName:"li"},"4 - 2 = 2"),". At 2 we found the minimum coins needed was 1, and we increment that to account for using another 2 denomination."),Object(i.a)("li",{parentName:"ol"},"At 5, we can find the valid combinations from ",Object(i.a)("inlineCode",{parentName:"li"},"5 - 2 = 3")," or ",Object(i.a)("inlineCode",{parentName:"li"},"5 - 3 = 2"),". In either case, the minimum coins is 1 to reach the amounts 2 and 3, and we increment that for a minimum of 2 coins required to reach 5."),Object(i.a)("li",{parentName:"ol"},"At 6, we again try both denominations ",Object(i.a)("inlineCode",{parentName:"li"},"6 - 2 = 4")," and ",Object(i.a)("inlineCode",{parentName:"li"},"6 - 3 = 3"),". We see the 2 denomination gets us here in 3 coins, but the 3 denomination gets us here in 2 coins (after incrementing), so that is the minimum."),Object(i.a)("li",{parentName:"ol"},"At 7, we do ",Object(i.a)("inlineCode",{parentName:"li"},"7 - 2 = 5")," and ",Object(i.a)("inlineCode",{parentName:"li"},"7 - 3 = 4"),", and in either case the min coins from the prior step was 2. We increment that to get 3."),Object(i.a)("li",{parentName:"ol"},"At 8, we do ",Object(i.a)("inlineCode",{parentName:"li"},"8 - 2 = 6")," and ",Object(i.a)("inlineCode",{parentName:"li"},"8 - 3 = 5"),", and in either case the min coins from the prior step was 2. We increment that to get 3.")),Object(i.a)("p",null,"Each step is a decision, and our choice is what coin should I use from all my available denominations to reach the current ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," from a prior value that will get here with the minimum number of coins.\nWe use the knowledge of previously calculated subproblem minimums to make the best decisions as we continue to build up the solution."),Object(i.a)("p",null,"This is a textbook example of dynamic programming in action.\nWe start at 0 (the smallest value) and build the solution up by solving the same subproblem repeatedly with different input values.\nWe store the answer to each subproblem in a memoization data structure.\nWe go through each value from the smallest to largest step-by-step and find the optimal solution locally for each subproblem.\nWe remove duplicate work by accessing previously calculated subproblem results from the memoization array which stores the minimum coins needed to reach any ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),".\nOnce we reach the ",Object(i.a)("inlineCode",{parentName:"p"},"target")," and solve this subproblem, it is also the global solution and answer to the question."))}ee.isMDXComponent=!0;var ae=Object(u.a)({},l.a.Javascript,"Infinity + 1"),ne=Object(g.a)(ae),te=Object(u.a)({},l.a.Javascript,"minCoinsForAmount[target]"),oe=(Object(g.a)(te),{});function ce(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},oe,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token comment"},"// Regardless of what the other number is,"),"\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// as long as it is a valid value, it will replace Infinity"),"\n",Object(i.a)("span",{parentName:"code",className:"token function"},"minimum"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"5")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"6"),"\n")))}ce.isMDXComponent=!0;var se=Object(u.a)({},l.a.Javascript,o.createElement(ce,null)),pe=Object(N.a)(se),me={};function re(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},me,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token function"},"minimum"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity"),"\n")))}re.isMDXComponent=!0;var ie=Object(u.a)({},l.a.Javascript,o.createElement(re,null)),ue=Object(N.a)(ie),le={};function Ne(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},le,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"The method seems reasonable, and now the only thing left is to determine the implementation details."),Object(i.a)("p",null,"The biggest remaining questions:"),Object(i.a)("ol",null,Object(i.a)("li",{parentName:"ol"},"What if there isn't a previous minimum value when we subtract a coin to reach an amount (ie. no combination of coins can sum to the value)?"),Object(i.a)("li",{parentName:"ol"},"How do we know if we didn't have a combination of coins that is able to sum to our target?")),Object(i.a)("p",null,"In the case when we do have a valid combination that reaches an ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),", if we call ",Object(i.a)(Z,{mdxType:"MinFunction"})," on any number and compare it to ",Object(i.a)(G,{mdxType:"LanguageMaxValue"}),", it will always return this smaller number.\nThis means ",Object(i.a)(G,{mdxType:"LanguageMaxValue"})," will always be replaced when there is a valid coin combination."),Object(i.a)(pe,{mdxType:"SimpleMinimum"}),Object(i.a)("p",null,"If the current denomination is unable to form a valid combination that reaches the current ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),",\nthen when we do ",Object(i.a)("inlineCode",{parentName:"p"},"amount - coin")," and look up a previous value in the memoization array, the minimum coins at this previous ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," will be ",Object(i.a)(G,{mdxType:"LanguageMaxValue"}),".\nWhen we increment ",Object(i.a)("inlineCode",{parentName:"p"},"+1"),", it will be ",Object(i.a)(ne,{mdxType:"LanguageMaxValueIncrement"})," which is just ",Object(i.a)(G,{mdxType:"LanguageMaxValue"})," since it can't be any larger than the allowable max.\nThen we call ",Object(i.a)(Z,{mdxType:"MinFunction"})," and if there was a minimum already found for this ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," it will be less than ",Object(i.a)(G,{mdxType:"LanguageMaxValue"})," and not be replaced.\nIf there wasn't a previous minimum for this ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),", it will remain ",Object(i.a)(G,{mdxType:"LanguageMaxValue"})," which means we still have not found a valid combination that reaches this ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),"."),Object(i.a)(ue,{mdxType:"MinimumOfMaxValue"}),Object(i.a)("p",null,"So ",Object(i.a)(G,{mdxType:"LanguageMaxValue"})," indicates there isn't a valid combination of coins, and our logic ensures it will always be replaced anytime if there is a valid solution to a subproblem."),Object(i.a)("p",null,"If we reach the end and ",Object(i.a)("inlineCode",{parentName:"p"},"memo[target]")," is ",Object(i.a)(G,{mdxType:"LanguageMaxValue"}),", we know there wasn't a valid combination to reach the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),", and it returns ",Object(i.a)("inlineCode",{parentName:"p"},"-1")," as the solution."),Object(i.a)("p",null,"An example of when we could not reach the ",Object(i.a)("inlineCode",{parentName:"p"},"target")," would be ",Object(i.a)("inlineCode",{parentName:"p"},"denominations = [3, 6, 11]")," and ",Object(i.a)("inlineCode",{parentName:"p"},"target = 13"),".\nWe would get the following table of minimum coins:"),Object(i.a)(P.h,{mdxType:"Container"},Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},"amount    ",Object(i.a)("span",{parentName:"code",className:"token operator"},"="),"  ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),"    ",Object(i.a)("span",{parentName:"code",className:"token number"},"2"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"4"),"    ",Object(i.a)("span",{parentName:"code",className:"token number"},"5"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"6"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"7"),"    ",Object(i.a)("span",{parentName:"code",className:"token number"},"8"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"9"),"  ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"11"),"  ",Object(i.a)("span",{parentName:"code",className:"token number"},"12"),"   ",Object(i.a)("span",{parentName:"code",className:"token number"},"13"),"\nmin coins ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"  ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"  ",Object(i.a)("span",{parentName:"code",className:"token number"},"2"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token maybe-class-name"},"Inf"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),"\n",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Output -1"),"\n"))),Object(i.a)("p",null,"When we finish trying to use all the ",Object(i.a)("inlineCode",{parentName:"p"},"denominations")," for each ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),",\nour solution to the question should be the result in the final array index since this is the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),".\nIf this value is ",Object(i.a)(G,{mdxType:"LanguageMaxValue"}),", then we return ",Object(i.a)("inlineCode",{parentName:"p"},"-1")," because there isn't a valid combination of coins that can reach this amount."))}Ne.isMDXComponent=!0;var be={};function de(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},be,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"Now let's walk through one more example and add one additional denomination so we can really understand how we combine coins to yield the minimum change.\nWe'll use ",Object(i.a)("inlineCode",{parentName:"p"},"denominations = [2, 3, 5]")," and ",Object(i.a)("inlineCode",{parentName:"p"},"target = 8"),"."),Object(i.a)("p",null,"The process is the exact same.\nWe start at ",Object(i.a)("inlineCode",{parentName:"p"},"0")," and iterate to the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),".\nAt each ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," we try all three ",Object(i.a)("inlineCode",{parentName:"p"},"denominations")," 2, 3, and 5 to see if using each coin at each spot can be added to a prior coin combination from a smaller ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," to reach this step.\nWe subtract the denomination value from the current ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," and determine if we can create a new minimum combination of coins to reach the current value by adding a coin to a previous subproblem solution."),Object(i.a)(P.h,{style:{marginTop:"16px"},mdxType:"Container"},Object(i.a)(Y.a,Object(t.a)({},l.l,{width:"100%",url:"https://vimeo.com/468324961",mdxType:"ReactPlayer"}))),Object(i.a)("p",null,"Or the final screen with all the decisions:"),Object(i.a)(_.a,{src:"/images/vending-machine-2-3-5-solution.png",mdxType:"Image"}),Object(i.a)("p",null,"At each ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," we find the minimum between the current smallest change combination or adding a new denomination to a prior minimum.\nEach time we are only trying to add one additional coin to a prior minimum coin combination, so you should notice that we always increment ",Object(i.a)("inlineCode",{parentName:"p"},"+1")," to account for this new coin."),Object(i.a)("p",null,"No matter how many denominations we use, the logic is always the same.\nWe continue to solve the same subproblems, and once we consider the minimum coins required for every ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," with all the ",Object(i.a)("inlineCode",{parentName:"p"},"denominations"),", we will build up and eventually reach ",Object(i.a)("inlineCode",{parentName:"p"},"target")," which is also the solution."))}de.isMDXComponent=!0;var je={};function Oe(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},je,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("h3",null,"Top-Down Summary"),Object(i.a)("p",null,"Up to this point, we've walked through the entire bottom-up solution.\nLet's briefly look at the top-down algorithm to see how we follow the same process of solving similar subproblems.\nWith the bottom-up approach, we summed all the coins from ",Object(i.a)("inlineCode",{parentName:"p"},"0")," to our ",Object(i.a)("inlineCode",{parentName:"p"},"target"),"."),Object(i.a)("p",null,"With the top-down approach, we subtract all the coins from the ",Object(i.a)("inlineCode",{parentName:"p"},"target")," and have found a successful path when we reach ",Object(i.a)("inlineCode",{parentName:"p"},"0"),".\nTop-down is the inverse of bottom-up, so instead of going ",Object(i.a)("inlineCode",{parentName:"p"},"0")," to ",Object(i.a)("inlineCode",{parentName:"p"},"target"),", we go from ",Object(i.a)("inlineCode",{parentName:"p"},"target")," to ",Object(i.a)("inlineCode",{parentName:"p"},"0"),"."),Object(i.a)("p",null,"We'll consider ",Object(i.a)("inlineCode",{parentName:"p"},"target = 11")," and ",Object(i.a)("inlineCode",{parentName:"p"},"denominations = [2, 3, 7]"),".\nWe start at 11 and then subtract each of the denominations (-2, -3, -7) from it, which creates 3 paths."),Object(i.a)(_.a,{src:"/images/vending-machine-top-down.png",isVisuAlgo:!0,mdxType:"Image"}),Object(i.a)("p",null,"These are our subproblems.\nWe do the exact same operation again and subtract all 3 coins from each of the resulting amounts."),Object(i.a)("p",null,"We recursively subtract coins until we reach the base cases.\nThen from the base case, we start to unwind and add 1 coin for each level since the subtraction indicated we were trying 1 new coin each recursive call.\nThen whichever denomination led to the smallest number of coins at a subproblem, we memoize that value.\nOnce we return to the original function call, if we had a valid coin combination, we increment one final time for that subproblem and then return this result as the solution."),Object(i.a)("p",null,"The shortest path (the one where we increment the fewest numbers of times) is the answer and the minimum number of coins that can reach our solution."),Object(i.a)("p",null,"What we'll notice is that when we work this top-down, we reach the same values multiple times.\nThese are our overlapping subproblems.\nWe memoize them so we don't repeat the same recursive calculations and just use the minimum coins already found to reach that value."))}Oe.isMDXComponent=!0;var ke=[R,B,ee,Ne,de,Oe],he=n("lcwc"),ge=(n("PH+U"),n("S2YG")),we={};function fe(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},we,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"This question is a classic example of dynamic programming.\nWe saw that if we calculate the minimum coins needed for all the amounts from 0 to the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),", we could build up our solution.\nEach step was its own subproblem, and finding the minimum coins needed locally at each subproblem allowed us to find the global solution once we reach the ",Object(i.a)("inlineCode",{parentName:"p"},"target")," which is the answer to the question.\nThe solution to each subproblem required the answers to previous subproblems, so we memoized each local answer and used it to find the solution at each step without performing duplicate work."),Object(i.a)("ul",null,Object(i.a)("li",{parentName:"ul"},"Used dynamic programming to find an optimal solution"),Object(i.a)("li",{parentName:"ul"},"Solve subproblems to build up your solutions"),Object(i.a)("li",{parentName:"ul"},'Use memoization to remove duplicate work (we "look back" to old values in the memo table instead of recalculating them)'),Object(i.a)("li",{parentName:"ul"},"Walked through a bottom-up and top-down solution to a dynamic programming problem")))}fe.isMDXComponent=!0;var ye=fe,ve={};function Ce(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},ve,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(i.a)("span",{parentName:"code",className:"token function-variable function"},"minCoinsForChange")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token parameter"},"denominations",Object(i.a)("span",{parentName:"span",className:"token punctuation"},",")," target"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n    Init all values to Infinity which indicates there isn't a valid coin combination for an amount (yet)\n    This is our dp / memo array that we're using to memoize the solution to subproblems\n  */"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," minCoinsForAmount ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"new")," ",Object(i.a)("span",{parentName:"code",className:"token class-name"},"Array"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"target ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(i.a)("span",{parentName:"code",className:"token method function property-access"},"fill"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Bottom-up, start with 0 which is always 0"),"\n  minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n    Begin at the smallest amount and build a running table of\n    the smallest values required to reach EVERY amount up to the target\n  */"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token keyword"},"let")," amount ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";")," amount ",Object(i.a)("span",{parentName:"code",className:"token operator"},"<")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(i.a)("span",{parentName:"code",className:"token property-access"},"length"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";")," amount",Object(i.a)("span",{parentName:"code",className:"token operator"},"++"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Try each denomination to reach the current amount"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token keyword"},"let")," coin ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"of")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"coin ",Object(i.a)("span",{parentName:"code",className:"token operator"},"<=")," amount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        ",Object(i.a)("span",{parentName:"code",className:"token comment"},"// The current minimum (subproblem solution) found at this amount."),"\n        ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," existingMinCoinForAmount ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"amount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n        ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n          Subtract (amount - coin) to find the min coins to reach this location from a prior value.\n          Always increment by +1 because we are trying one additional coin.\n        */"),"\n        ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," minAmountWithCurrentCoin ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"amount ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," coin",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n        ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n          Memoize the minimum coins to reach the current amount.\n          This is either a minimum we previously calculated or a new minimum we found with the current coin.\n          If there isn't a valid combination, this just remains Infinity.\n        */"),"\n        minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"amount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token known-class-name class-name"},"Math"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(i.a)("span",{parentName:"code",className:"token method function property-access"},"min"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"existingMinCoinForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," minAmountWithCurrentCoin",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n      ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n    If we didn't find a combination that matched our target (target === Infinity), return -1.\n    Otherwise, the target does exist for that amount and we return it.\n  */"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"===")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"?")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n")))}Ce.isMDXComponent=!0;var xe=Object(u.a)({},l.a.Javascript,o.createElement(Ce,null)),Te=Object(N.a)(xe),Ie={};function Me(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},Ie,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(i.a)("span",{parentName:"code",className:"token function"},"minCoinsForChange"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token parameter"},"denominations",Object(i.a)("span",{parentName:"span",className:"token punctuation"},",")," target"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"target ",Object(i.a)("span",{parentName:"code",className:"token operator"},"<")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n    Init all values to 0 which indicates no coins yet match the target\n    This is our dp / memo array that we're using to memoize the solution to subproblems\n  */"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," minCoinsForAmount ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"new")," ",Object(i.a)("span",{parentName:"code",className:"token class-name"},"Array"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"target ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(i.a)("span",{parentName:"code",className:"token method function property-access"},"fill"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(i.a)("span",{parentName:"code",className:"token function"},"minCoinsForChangeMemo"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(i.a)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(i.a)("span",{parentName:"code",className:"token function"},"minCoinsForChangeMemo"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token parameter"},"denominations",Object(i.a)("span",{parentName:"span",className:"token punctuation"},",")," remaining",Object(i.a)("span",{parentName:"span",className:"token punctuation"},",")," minCoinsForAmount"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n    Base case 1: Invalid remaining coins\n    We use -1 to indicate it's invalid\n  */"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"remaining ",Object(i.a)("span",{parentName:"code",className:"token operator"},"<")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Reached zero, valid case"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"remaining ",Object(i.a)("span",{parentName:"code",className:"token operator"},"===")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Check if we have a memoized (already calculated) value for this amount remaining amount"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"remaining",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"!==")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"remaining",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"let")," minStepsForRemaining ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Subtract each coin from the current remaining amount (fork paths from this amount)"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," coin ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"of")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," stepsForCoin ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token function"},"minCoinsForChangeMemo"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," remaining ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-")," coin",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n      ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n        If changeResult >= 0, it's possible to make change with this denomination,\n        and the steps for this denomination is less than the current min,\n        we increment the steps to account for it as the new mininum.\n\n        stepsForCoin = -1 means it's invalid which is why we check for >= 0\n      */"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"stepsForCoin ",Object(i.a)("span",{parentName:"code",className:"token operator"},">=")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"&&")," stepsForCoin ",Object(i.a)("span",{parentName:"code",className:"token operator"},"<")," minStepsForRemaining",Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      minStepsForRemaining ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," stepsForCoin ",Object(i.a)("span",{parentName:"code",className:"token operator"},"+")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"/*\n    If we're able to find a minStepsForRemaining for the current subproblem, we memoize it.\n    If it minStepsForRemaining === Infinity, it's not valid and we use our invalid placeholder -1.\n  */"),"\n  minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"remaining",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"minStepsForRemaining ",Object(i.a)("span",{parentName:"code",className:"token operator"},"===")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"Infinity"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"?")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," minStepsForRemaining",Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," minCoinsForAmount",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"remaining",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n")))}Me.isMDXComponent=!0;var We=Object(u.a)({},l.a.Javascript,o.createElement(Me,null)),Ae=Object(N.a)(We),De={};function Se(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},De,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("p",null,"This question can be solved using a bottom-up dynamic programming solution.\nTo calculate the solution, we start at ",Object(i.a)("inlineCode",{parentName:"p"},"0")," and find the minimum number of coins to make change for all the amounts up to our ",Object(i.a)("inlineCode",{parentName:"p"},"target"),"."),Object(i.a)("p",null,"We can solve this by using a combination of subproblem solutions.\nAt each step, we find the minimum number of ways to make change for every ",Object(i.a)("inlineCode",{parentName:"p"},"amount")," from ",Object(i.a)("inlineCode",{parentName:"p"},"0")," to the ",Object(i.a)("inlineCode",{parentName:"p"},"target")," by trying each denomination at each value.\nWe subtract a coin's value to \"look back\" to check if there was a previously calculated minimum that we can add this coin's value to which would reach the current ",Object(i.a)("inlineCode",{parentName:"p"},"amount"),".\nWe use an array to store the results to subproblems and track the minimum coins required for all change values up to the ",Object(i.a)("inlineCode",{parentName:"p"},"target"),"."),Object(i.a)(Te,{mdxType:"SolutionCode"}),Object(i.a)(he.a,{mdxType:"ComplexitySubtitle"}),Object(i.a)("p",null,Object(i.a)(S.a.n,{letter:"d x target"})," time and ",Object(i.a)(S.a.n,{letter:"target"})," space."),Object(i.a)("p",null,"Here ",Object(i.a)("inlineCode",{parentName:"p"},"d")," is the number of denominations of coins to choose from and ",Object(i.a)("inlineCode",{parentName:"p"},"target")," is the actual value of the target.\nWe try all the denominations at all the targets in nested loops, so it's ",Object(i.a)("inlineCode",{parentName:"p"},"d x target"),".\nFor the space complexity, we create a new array of length equal to the ",Object(i.a)("inlineCode",{parentName:"p"},"target")," value."),Object(i.a)("h3",null,"Bonus"),Object(i.a)("p",null,Object(i.a)("strong",{parentName:"p"},"Top-Down Recursive Dynamic Programming Solution")),Object(i.a)(Ae,{mdxType:"RecursiveSolutionCode"}),Object(i.a)(ge.a,{mdxType:"LearningOutcomesSubtitle"}),Object(i.a)(ye,{mdxType:"LearningOutcomes"}))}Se.isMDXComponent=!0;var Fe=Se,Xe={};function qe(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},Xe,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(i.a)("span",{parentName:"code",className:"token function-variable function"},"minCoinsForChange")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token parameter"},"denominations",Object(i.a)("span",{parentName:"span",className:"token punctuation"},",")," target"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token comment"},"// Your solution here"),"\n",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n")))}qe.isMDXComponent=!0;var Le=Object(u.a)({},l.a.Javascript,o.createElement(qe,null)),Ee=function(e){return Le[e]},ze={};function Ve(e){var a=e.components,n=Object(r.a)(e,["components"]);return Object(i.a)("wrapper",Object(t.a)({},ze,n,{components:a,mdxType:"MDXLayout"}),Object(i.a)("pre",{className:"language-javascript"},Object(i.a)("code",{parentName:"pre",className:"language-javascript"},Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," tests ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"5")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'empty'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"2"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"8")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'simple case two coins'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"12")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'simple case three coins'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"30")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'multiple options'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"35")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"4"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'multiple options combined'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"6"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"11"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"13")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'unreachable small'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'below minimum denomination'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"25"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"65")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"4"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'three coin options'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"25"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"67")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"6"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'four coin options'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"25"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"50"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"100"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"190")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'five coin options'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"5"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"10"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"25"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"53")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'unreachable large'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"2"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"7"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"11")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'change from top-down explanation'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"2"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"7"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"0"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'target is 0'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," denominations",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(i.a)("span",{parentName:"code",className:"token number"},"2"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"3"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"7"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," target",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token number"},"1")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"-"),Object(i.a)("span",{parentName:"code",className:"token number"},"1"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(i.a)("span",{parentName:"code",className:"token string"},"'target is 1'"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},","),"\n",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(i.a)("span",{parentName:"code",className:"token function-variable function"},"validate")," ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(i.a)("span",{parentName:"code",className:"token parameter"},Object(i.a)("span",{parentName:"span",className:"token punctuation"},"{")," input",Object(i.a)("span",{parentName:"span",className:"token punctuation"},",")," expected",Object(i.a)("span",{parentName:"span",className:"token punctuation"},",")," description ",Object(i.a)("span",{parentName:"span",className:"token punctuation"},"}")),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(i.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," userAnswer ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(i.a)("span",{parentName:"code",className:"token function"},"minCoinsForChange"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},"("),"input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(i.a)("span",{parentName:"code",className:"token property-access"},"denominations"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," input",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(i.a)("span",{parentName:"code",className:"token property-access"},"target"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"const")," passed ",Object(i.a)("span",{parentName:"code",className:"token operator"},"=")," userAnswer ",Object(i.a)("span",{parentName:"code",className:"token operator"},"===")," expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(i.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"{")," passed",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," description",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," expected",Object(i.a)("span",{parentName:"code",className:"token punctuation"},",")," userAnswer ",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(i.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(i.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n")))}Ve.isMDXComponent=!0;var Je=Object(u.a)({},l.a.Javascript,o.createElement(Ve,null)),Re=function(e){return Je[e]},_e={segments:[{name:"Introduction",startTimeSeconds:0,endTimeSeconds:9},{name:"Question Prompt",startTimeSeconds:9,endTimeSeconds:82},{name:"Solution Breakdown",startTimeSeconds:82,endTimeSeconds:2158},{name:"Solution Summary and Big O",startTimeSeconds:2158,endTimeSeconds:2230},{name:"Code Walkthrough",startTimeSeconds:2230,endTimeSeconds:2611}]},Pe=function(e){var a=e.hasLessonAccess;return o.createElement(p.a,Object(t.a)({},e,{Introduction:I,QuestionStatement:C,Solution:a?Fe:m.a,LearningOutcomes:a?ye:null,validationItems:q,explanationItems:a?ke:[],getUserAnswer:Ee,getTests:a?Re:m.b,getSolutionCode:a?Te:m.b,video:_e}))},Ue=!0;a.default=Object(s.a)((function(e){return o.useEffect((function(){e.lesson&&"ACTIVE"===e.lesson.status||(window.location.href="/course")}),[e]),e.lesson&&"ACTIVE"===e.lesson.status?o.createElement(c.a,Object(t.a)({},e,{Component:Pe})):null}),{ssr:!1})},s7Mn:function(e,a,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/course/vending-machine",function(){return n("qlHD")}])},uqmq:function(e,a,n){"use strict";n.d(a,"b",(function(){return s})),n.d(a,"c",(function(){return p})),n.d(a,"a",(function(){return m}));var t=n("vOnD"),o=n("gWsq"),c=n("SOUA"),s=Object(t.e)(o.h).withConfig({componentId:"sc-16wjbcj-0"})(["margin-top:","px;"],c.a),p=Object(t.e)(s).withConfig({componentId:"sc-16wjbcj-1"})(["display:flex;justify-content:center;align-items:center;"]),m=t.e.div.withConfig({componentId:"sc-16wjbcj-2"})(["margin-top:","px;"],c.a)}},[["s7Mn",0,1,4,6,5,9,12,11,13,14,15,18,17,21,2,3,7,8,10,16,19,22,23,24]]]);