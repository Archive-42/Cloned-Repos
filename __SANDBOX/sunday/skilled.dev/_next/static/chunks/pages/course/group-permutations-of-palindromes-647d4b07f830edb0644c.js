_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[72],{"+FKO":function(a,e,t){"use strict";var n=t("ODXe"),c=t("q1tI"),o=t("ahz1"),s=t("vOnD"),p=t("IqxL"),r=t("gWsq"),m=t("MLAZ"),N=Object(s.e)(r.p).withConfig({componentId:"sc-77trup-0"})(["color:inherit;font-weight:inherit;background-image:linear-gradient( transparent 0%,transparent calc(50% - ","px),"," calc(50% - ","px),"," 100% );background-size:100% 200%;transition:background-position 125ms ease-in-out 0s,padding 125ms ease-in-out 0s;background-position:0px 0px;padding:0;padding:2px 0px 3px;&:hover,&:focus{background-position:0px 100%;background-image:linear-gradient( transparent 0%,transparent calc(50% - ","px),"," calc(50% - ","px),"," 100% );color:",";outline:none;}"],4,(function(a){var e=a.theme;return Object(m.a)(e.color.highlight,.6)}),4,(function(a){var e=a.theme;return Object(m.a)(e.color.highlight,.6)}),4,(function(a){return a.theme.color.highlight}),4,(function(a){return a.theme.color.highlight}),p.b.Black2),u=function(a){var e=a.children,t=a.content,s=c.useState(!1),p=Object(n.a)(s,2),r=p[0],m=p[1],u=c.useCallback((function(){return m((function(a){return!a}))}),[]);return c.createElement(c.Fragment,null,c.createElement(N,{onClick:u,"aria-haspopup":!0,"aria-expanded":r},e),c.createElement(o.a,{titleText:"Concept reference",isOpen:r,onClose:u,content:t}))};e.a=u},"9XTu":function(a,e,t){"use strict";t.d(e,"a",(function(){return m}));var n=t("wx14"),c=t("Ff2n"),o=(t("q1tI"),t("7ljp")),s=t("jDXR"),p=t("gWsq"),r={};function m(a){var e=a.components,t=Object(c.a)(a,["components"]);return Object(o.a)("wrapper",Object(n.a)({},r,t,{components:e,mdxType:"MDXLayout"}),Object(o.a)(s.a,{mdxType:"SubsectionHeader"},"Permutations"),Object(o.a)("p",null,"A permutation is a different ordering of a string's characters."),Object(o.a)("p",null,"For example, a 3 letter word will have 6 (",Object(o.a)("inlineCode",{parentName:"p"},"3! = 3 * 2 * 1"),") permutations.\nConsider the word ",Object(o.a)("inlineCode",{parentName:"p"},"dev"),":"),Object(o.a)(p.h,{mdxType:"Container"},Object(o.a)("pre",{className:"language-javascript"},Object(o.a)("code",{parentName:"pre",className:"language-javascript"},Object(o.a)("span",{parentName:"code",className:"token number"},"1.")," dev\n",Object(o.a)("span",{parentName:"code",className:"token number"},"2.")," dve\n",Object(o.a)("span",{parentName:"code",className:"token number"},"3.")," evd\n",Object(o.a)("span",{parentName:"code",className:"token number"},"4.")," edv\n",Object(o.a)("span",{parentName:"code",className:"token number"},"5.")," vde\n",Object(o.a)("span",{parentName:"code",className:"token number"},"6.")," ved\n"))),Object(o.a)("p",null,"If a question asks if strings are permutations of each other, it is asking if they have the same characters in a different order."))}m.isMDXComponent=!0},JVRC:function(a,e,t){"use strict";t.d(e,"a",(function(){return j}));var n=t("wx14"),c=t("Ff2n"),o=t("q1tI"),s=t("7ljp"),p=t("jDXR"),r=t("gWsq"),m=t("rePB"),N=t("Utoj"),u=t("Jpar"),l={};function i(a){var e=a.components,t=Object(c.a)(a,["components"]);return Object(s.a)("wrapper",Object(n.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(s.a)("pre",{className:"language-javascript"},Object(s.a)("code",{parentName:"pre",className:"language-javascript"},Object(s.a)("span",{parentName:"code",className:"token comment"},"// Regex to remove non-alphanumeric"),"\n",Object(s.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(s.a)("span",{parentName:"code",className:"token function-variable function"},"removeNonAlphanumeric")," ",Object(s.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.a)("span",{parentName:"code",className:"token parameter"},"string")," ",Object(s.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," string",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.a)("span",{parentName:"code",className:"token method function property-access"},"replace"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.a)("span",{parentName:"code",className:"token regex"},Object(s.a)("span",{parentName:"span",className:"token regex-delimiter"},"/"),Object(s.a)("span",{parentName:"span",className:"token language-regex"},Object(s.a)("span",{parentName:"span",className:"token charset"},Object(s.a)("span",{parentName:"span",className:"token charset-punctuation"},"["),Object(s.a)("span",{parentName:"span",className:"token charset-negation"},"^"),Object(s.a)("span",{parentName:"span",className:"token range"},"0",Object(s.a)("span",{parentName:"span",className:"token range-punctuation"},"-"),"9"),Object(s.a)("span",{parentName:"span",className:"token range"},"a",Object(s.a)("span",{parentName:"span",className:"token range-punctuation"},"-"),"z"),Object(s.a)("span",{parentName:"span",className:"token charset-punctuation"},"]"))),Object(s.a)("span",{parentName:"span",className:"token regex-delimiter"},"/"),Object(s.a)("span",{parentName:"span",className:"token regex-flags"},"gi")),Object(s.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(s.a)("span",{parentName:"code",className:"token string"},"''"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(s.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(s.a)("span",{parentName:"code",className:"token function-variable function"},"isPalindrome")," ",Object(s.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.a)("span",{parentName:"code",className:"token parameter"},"string")," ",Object(s.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(s.a)("span",{parentName:"code",className:"token comment"},"// For simplicity, I'm doing the transforming here at an assumed O(n) cost"),"\n  ",Object(s.a)("span",{parentName:"code",className:"token comment"},"// You could also not transform it and consider this when you compare characters"),"\n  ",Object(s.a)("span",{parentName:"code",className:"token keyword"},"const")," formattedString ",Object(s.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.a)("span",{parentName:"code",className:"token function"},"removeNonAlphanumeric"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},"("),"string",Object(s.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.a)("span",{parentName:"code",className:"token method function property-access"},"toLowerCase"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(s.a)("span",{parentName:"code",className:"token comment"},"// Walk from the beginning and end to the middle and compare each character"),"\n  ",Object(s.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(s.a)("span",{parentName:"code",className:"token keyword"},"let")," i ",Object(s.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(s.a)("span",{parentName:"code",className:"token number"},"0"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},";")," i ",Object(s.a)("span",{parentName:"code",className:"token operator"},"<")," formattedString",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.a)("span",{parentName:"code",className:"token property-access"},"length")," ",Object(s.a)("span",{parentName:"code",className:"token operator"},"/")," ",Object(s.a)("span",{parentName:"code",className:"token number"},"2"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},";")," i",Object(s.a)("span",{parentName:"code",className:"token operator"},"++"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(s.a)("span",{parentName:"code",className:"token comment"},"// If the characters are ever not equal, it's not a palindrome"),"\n    ",Object(s.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"("),"formattedString",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"["),"i",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(s.a)("span",{parentName:"code",className:"token operator"},"!==")," formattedString",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"["),"string",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(s.a)("span",{parentName:"code",className:"token property-access"},"length")," ",Object(s.a)("span",{parentName:"code",className:"token operator"},"-")," ",Object(s.a)("span",{parentName:"code",className:"token number"},"1")," ",Object(s.a)("span",{parentName:"code",className:"token operator"},"-")," i",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      ",Object(s.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.a)("span",{parentName:"code",className:"token boolean"},"false"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(s.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(s.a)("span",{parentName:"code",className:"token boolean"},"true"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(s.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(s.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n")))}i.isMDXComponent=!0;var d=Object(m.a)({},N.a.Javascript,o.createElement(i,null)),b=Object(u.a)(d),O={};function j(a){var e=a.components,t=Object(c.a)(a,["components"]);return Object(s.a)("wrapper",Object(n.a)({},O,t,{components:e,mdxType:"MDXLayout"}),Object(s.a)(p.a,{mdxType:"SubsectionHeader"},"Palindromes"),Object(s.a)("p",null,"A palindrome is a word, phrase, or sequence of characters that is the same forward as it is backward."),Object(s.a)("p",null,"Examples of palindromes include:"),Object(s.a)(r.h,{mdxType:"Container"},Object(s.a)("pre",{className:"language-javascript"},Object(s.a)("code",{parentName:"pre",className:"language-javascript"},"pop\n\nlevel\n\nracecar\n\n",Object(s.a)("span",{parentName:"code",className:"token maybe-class-name"},"Never")," odd or even ",Object(s.a)("span",{parentName:"code",className:"token comment"},"// ignore white space and case"),"\n"))),Object(s.a)("p",null,"To check for a palindrome, we can do the following:"),Object(s.a)(b,{mdxType:"IsPalindrome"}))}j.isMDXComponent=!0},P1t7:function(a,e,t){"use strict";t.r(e),t.d(e,"__N_SSG",(function(){return Ma}));var n=t("wx14"),c=t("q1tI"),o=t("NoRJ"),s=t("Qovc"),p=t("gh+C"),r=t("kB7q"),m=t("Ff2n"),N=t("7ljp"),u=(t("gZLk"),t("Utoj")),l=t("+FKO"),i=t("9XTu"),d=t("JVRC"),b=t("rePB"),O=t("Jpar"),j={};function k(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},j,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token comment"},"// Input"),"\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," strings ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'acerrac'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'aaccerr'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'aan'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'todo'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'doto'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'code'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'bob'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Output: groupPermutationsOfPalindromes(strings);"),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'aaccerr'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'acerrac'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'aan'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'bob'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n")))}k.isMDXComponent=!0;var h=Object(b.a)({},u.a.Javascript,c.createElement(k,null)),g=Object(O.a)(h),f={};function y(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},f,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)(g,{mdxType:"InputOutput"}))}y.isMDXComponent=!0;var w=t("JT+q"),v=Object(b.a)({},u.a.Javascript,"groupPermutationsOfPalindromes"),x=Object(w.a)(v),T={};function C(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},T,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,Object(N.a)("strong",{parentName:"p"},"Write a function ",Object(N.a)(x,{mdxType:"InlineCode"})," that takes an array of strings as the input and returns an array of arrays where the sub-arrays in the result are all ",Object(N.a)(l.a,{content:Object(N.a)(i.a,{mdxType:"Permutations"}),mdxType:"ConceptModal"},"permutations")," of the same ",Object(N.a)(l.a,{content:Object(N.a)(d.a,{mdxType:"Palindromes"}),mdxType:"ConceptModal"},"palindrome"),".")),Object(N.a)("p",null,"For a string to be included in the output, it must be the permutation of a palindrome.\nThat means if you rearranged the characters of the string, it could form a palindrome."),Object(N.a)("p",null,"We also want to group strings that are permutations of each other.\nThat means all strings in a sub-array could be rearranged to form any other string in the group (or the same palindrome)."),Object(N.a)("p",null,"The result array and sub-arrays can be in any order."),Object(N.a)("p",null,"The input strings will all be lowercase alphanumeric characters."),Object(N.a)(y,{mdxType:"SampleInputOutput"}))}C.isMDXComponent=!0;var D=C,X={};function S(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},X,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)(D,{mdxType:"QuestionStatement"}))}S.isMDXComponent=!0;var M=S,P={};function I(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},P,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"Think of this question in two steps. 1) How will you check if a string is a permutation of a palindrome? 2) How will you group strings that are permutations of each other?"))}I.isMDXComponent=!0;var L={};function A(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},L,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"The time/space complexity for this question is difficult.\nFocus on writing good code and optimize later if needed."))}A.isMDXComponent=!0;var q={};function E(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},q,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"An optimized and readable solution will likely contain multiple hash tables."))}E.isMDXComponent=!0;var W={};function J(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},W,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"You can use the number of individual characters in a string to determine if it is a permutation of a palindrome."))}J.isMDXComponent=!0;var _={};function F(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},_,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"You can compare sorted strings to determine if 2 strings are permutations of each other."))}F.isMDXComponent=!0;var z=[I,A,E,J,F],R=t("gWsq"),U={};function B(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},U,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"Let's understand what the problem is asking and what we're looking for.\nThe input to our function will be an array of strings,\nand the output should be an array that contains arrays of grouped strings."),Object(N.a)("p",null,"We will include a string in the response ",Object(N.a)("strong",{parentName:"p"},"only if it can form a palindrome from a permutation of its characters.")),Object(N.a)(R.h,{mdxType:"Container"},Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},"input   ",Object(N.a)("span",{parentName:"code",className:"token operator"},"|"),"  possible palindrome formed ",Object(N.a)("span",{parentName:"code",className:"token keyword module"},"from")," a permutation ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"of")," the input\n",Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),"\naaccerr ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," racecar\nacerrac ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," racecar\nelevl   ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," level\nbob     ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," bob\ncode    ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," ",Object(N.a)("span",{parentName:"code",className:"token constant"},"X")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"no palindromes possible",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),"\n"))),Object(N.a)("p",null,"If the characters can form a palindrome when rearranged, it will be grouped in an array with the other strings that are permutations of each other."),Object(N.a)("p",null,'In the above example, the strings that can be arranged to form the palindrome "racecar" would be grouped together.\nThe other strings that can form a palindrome ("elevl" and "bob") would be in their own separate groups respectively.'),Object(N.a)("p",null,"So re-stating this problem more simply, we are doing 2 things:"),Object(N.a)("ol",null,Object(N.a)("li",{parentName:"ol"},"Determine if a string is a permutation of a palindrome"),Object(N.a)("li",{parentName:"ol"},"Group the strings with the other items that are permutations of each other")),Object(N.a)("p",null,"Let's tackle these problems separately."))}B.isMDXComponent=!0;var Y=t("Ydbm"),G={};function H(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},G,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"First we will determine if a string is a permutation of a palindrome.\nA palindrome means a string is the same forward and backward,\nand we want to know if ",Object(N.a)("em",{parentName:"p"},"any arrangement")," of a string's characters can form a palindrome."),Object(N.a)("p",null,"The brute force way to generate all permutations for a string is ",Object(N.a)(Y.a.factorial,{letter:"c"})," where ",Object(N.a)("inlineCode",{parentName:"p"},"c")," is the number of characters in the string.\nThen we would need to check if each permutation is a palindrome.\nThere has to be a better way."),Object(N.a)("p",null,"Let's think about what knowledge we can gain from the definition of a palindrome.\nIf a palindrome is the same forward and backward, then if we split the palindrome in half,\nit would contain the same number of the individual letters in each half."),Object(N.a)(R.h,{mdxType:"Container"},Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},"n      o     ",Object(N.a)("span",{parentName:"code",className:"token operator"},"|"),"     o      n\nn x ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," o x ",Object(N.a)("span",{parentName:"code",className:"token number"},"1")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"|")," o x ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," n x ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),"   ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," n x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," o x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),"\n"))),Object(N.a)("p",null,"So we could say the total number of characters in a palindrome is ",Object(N.a)("inlineCode",{parentName:"p"},"2x")," the characters of half the palindrome.\nAny number multiplied by 2 is an even number.\nTherefore, a string could form a palindrome if there are an even number of characters for the entire string."),Object(N.a)(R.h,{mdxType:"Container"},Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token parameter"},"noon")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," n x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," o x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),"\n",Object(N.a)("span",{parentName:"code",className:"token parameter"},"sees")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," s x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," e x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),"\n",Object(N.a)("span",{parentName:"code",className:"token parameter"},"btrttrtb")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," b x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," t x ",Object(N.a)("span",{parentName:"code",className:"token number"},"4"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," r x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),"\n"))),Object(N.a)("p",null,"This is almost exactly true, except if our string has an odd number of characters.\nThen the middle character of the palindrome will appear only once, but every other character will appear an even number of times."),Object(N.a)(R.h,{mdxType:"Container"},Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token parameter"},"racecar")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," r x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," a x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," c x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," e x ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),"\n",Object(N.a)("span",{parentName:"code",className:"token parameter"},"zzprprpzz")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," z x ",Object(N.a)("span",{parentName:"code",className:"token number"},"4"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," r x ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," p x ",Object(N.a)("span",{parentName:"code",className:"token number"},"3"),"\n"))),Object(N.a)("p",null,"So we can say a string is a permutation of a palindrome if all but one character appear in a string an even number of times.\nOne character is allowed to appear an odd number of times and our string can still form a palindrome."))}H.isMDXComponent=!0;var V={};function Q(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},V,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token comment"},"// We use the modulo operator to determine if a number is odd"),"\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(N.a)("span",{parentName:"code",className:"token function-variable function"},"isOdd")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token parameter"},"num")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," num ",Object(N.a)("span",{parentName:"code",className:"token operator"},"%")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"!==")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(N.a)("span",{parentName:"code",className:"token comment"},"// All O(c) operations"),"\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(N.a)("span",{parentName:"code",className:"token function"},"isPermutationOfPalindrome"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"string"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Use a hash table to count the occurence of each character in a string"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// These are sequential O(c) operations"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," characterCountTable ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token keyword"},"let")," char ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"of")," string",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token operator"},"!"),"characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"char",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"char",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n    characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"char",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token operator"},"++"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Sum the number of characters that contain an odd count"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"let")," oddCharacterCount ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token known-class-name class-name"},"Object"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"values"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"forEach"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"numCharacters"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token function"},"isOdd"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"numCharacters",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      oddCharacterCount",Object(N.a)("span",{parentName:"code",className:"token operator"},"++"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// If only one character has an odd count, this function returns true"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"return")," oddCharacterCount ",Object(N.a)("span",{parentName:"code",className:"token operator"},"<=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n")))}Q.isMDXComponent=!0;var K=Object(b.a)({},u.a.Javascript,c.createElement(Q,null)),Z=Object(O.a)(K),$={};function aa(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},$,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"Translating that to code, we can determine if there is a permutation of a palindrome by doing the following:"),Object(N.a)(Z,{mdxType:"IsPermutationOfPalindrome"}),Object(N.a)("blockquote",null,Object(N.a)("p",{parentName:"blockquote"},"We are converting the string to an array to make it easier to operate on.\nWe also use the method ",Object(N.a)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values"},"Object.values"),".")),Object(N.a)("p",null,"First we create a hash table that tracks the count of each character in a string."),Object(N.a)("p",null,"Then we iterate through all the character counts in our hash table and increment a counter every time we see an odd number.\nIf we have 0 or 1 odd number character counts, we return true and otherwise false."),Object(N.a)(R.h,{mdxType:"Container"},Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token function"},"isPermutationOfPalindrome"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," characterCountTable ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  r",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  a",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"2"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  e",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\noddCharacterCount ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(N.a)("span",{parentName:"code",className:"token comment"},"// r x 2 + a x 2 + e x 1"),"\n",Object(N.a)("span",{parentName:"code",className:"token comment"},"//   0   +   0   +   1"),"\n\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"return")," oddCharacterCount ",Object(N.a)("span",{parentName:"code",className:"token operator"},"<=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"1")," ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// true -> is permutation of palindrome"),"\n"))),Object(N.a)("p",null,"All the operations are linear time and space, so the function itself is ",Object(N.a)(Y.a.n,{letter:"c"})," where ",Object(N.a)("inlineCode",{parentName:"p"},"c")," is the number of characters in an arbitrarily large string.\nWhen we use this function for all ",Object(N.a)("inlineCode",{parentName:"p"},"n")," words in our list, that will be ",Object(N.a)(Y.a.n,{letter:"n x c"}),"."))}aa.isMDXComponent=!0;var ea={};function ta(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},ea,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"Now all we need to is group the strings that are permutations of each other."),Object(N.a)("p",null,"Strings that are permutations of each other have all the same characters.\nYou may be tempted to count the number of characters again and then compare these counts to other words.\nThat would actually be ",Object(N.a)(Y.a.n2,null)," because we would have to compare all strings against each other."),Object(N.a)("p",null,"In this instance, it would actually be faster to sort the strings and then add the sorted string as a key to a hash table.\nBy doing this, all permutations will be grouped together because they will have the same key in the hash table.\nThe value for the key-value pair in the hash table will be an array containing the original strings."),Object(N.a)(R.h,{mdxType:"Container"},Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},"input      ",Object(N.a)("span",{parentName:"code",className:"token function"},"sorted")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token keyword"},"for")," hash table key",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),"\n",Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),Object(N.a)("span",{parentName:"code",className:"token operator"},"--"),"\nracecar ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," aaccerr\nacerrac ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," aaccerr\naaccerr ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-"),Object(N.a)("span",{parentName:"code",className:"token operator"},">")," aaccerr\n\ntable ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  aaccerr",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'acerrac'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'aaccerr'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n"))),Object(N.a)("p",null,"Once we finish that hash table, we can return all of its values as the solution because they are already grouped in their sub-arrays of permutations."))}ta.isMDXComponent=!0;var na=[B,H,aa,ta],ca=t("lcwc"),oa=t("S2YG"),sa=t("PH+U"),pa={};function ra(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},pa,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("ul",null,Object(N.a)("li",{parentName:"ul"},"A complicated permutation and palindrome problem to understand them both deeply"),Object(N.a)("li",{parentName:"ul"},"We saw how strings can be treated like an array of characters"),Object(N.a)("li",{parentName:"ul"},"We worked through a difficult Big O complexity analysis"),Object(N.a)("li",{parentName:"ul"},"We used a hash table to easily and quickly group similar items"),Object(N.a)("li",{parentName:"ul"},"We made our code modular and broke it into functions")))}ra.isMDXComponent=!0;var ma=ra,Na={};function ua(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},Na,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(N.a)("span",{parentName:"code",className:"token function"},"groupPermutationsOfPalindromes"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"strings"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," permutationsOfPalindromes ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Iterate through all O(n) strings in our array"),"\n  strings",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"forEach"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"string"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Check if each string is a palindrome O(c)"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token function"},"isPermutationOfPalindrome"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"string",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Sort our string's order O(c log c)"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Permutations will sort to the same string"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," sortedString ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," string\n        ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"split"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token string"},"''"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),"\n        ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"sort"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),"\n        ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"join"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token string"},"''"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n      ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Initialize the key to an array if we"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// haven't seen any of the string's permutations yet"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token operator"},"!"),"permutationsOfPalindromes",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"sortedString",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        permutationsOfPalindromes",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"sortedString",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n      permutationsOfPalindromes",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"sortedString",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"push"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"string",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// This will return all the values of the hash table as an array"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Since the values are also arrays, this is the form of the result we want"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(N.a)("span",{parentName:"code",className:"token known-class-name class-name"},"Object"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"values"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"permutationsOfPalindromes",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n\n",Object(N.a)("span",{parentName:"code",className:"token comment"},"// We use the modulo operator to determine if a number is odd"),"\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(N.a)("span",{parentName:"code",className:"token function-variable function"},"isOdd")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token parameter"},"num")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," num ",Object(N.a)("span",{parentName:"code",className:"token operator"},"%")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"2")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"!==")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(N.a)("span",{parentName:"code",className:"token comment"},"// All O(c) operations"),"\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(N.a)("span",{parentName:"code",className:"token function"},"isPermutationOfPalindrome"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"string"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Use a hash table to count the occurence of each character in a string"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// These are sequential O(c) operations"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," characterCountTable ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token keyword"},"let")," char ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"of")," string",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token operator"},"!"),"characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"char",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"char",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n    characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"char",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token operator"},"++"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Sum the number of characters that contain an odd count"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"let")," oddCharacterCount ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token known-class-name class-name"},"Object"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"values"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"characterCountTable",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"forEach"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"numCharacters"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token function"},"isOdd"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"numCharacters",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      oddCharacterCount",Object(N.a)("span",{parentName:"code",className:"token operator"},"++"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// If only one character has an odd count, this function returns true"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"return")," oddCharacterCount ",Object(N.a)("span",{parentName:"code",className:"token operator"},"<=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"1"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n")))}ua.isMDXComponent=!0;var la=Object(b.a)({},u.a.Javascript,c.createElement(ua,null)),ia=Object(O.a)(la),da=Object(b.a)({},u.a.Javascript,".split('')"),ba=Object(w.a)(da),Oa=Object(b.a)({},u.a.Javascript,".join('')"),ja=Object(w.a)(Oa),ka={};function ha(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},ka,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("p",null,"This question really tests your ability to work with strings and your understanding of permutations and palindromes."),Object(N.a)("p",null,"We iterate through each string in the array and determine if it is a permutation of a palindrome.\nIf it is a palindrome, we group it with the other strings that are permutations of each other."),Object(N.a)("p",null,"To check if a string is a permutation of palindrome, we count all of its characters to determine if only 0 or 1 characters occur an odd number of times."),Object(N.a)("p",null,"If this string passes that test, then we add it to our results.\nWe sort the string's characters and store our results in a hash table of arrays with strings that sort to the same key."),Object(N.a)("p",null,"Notice that we ",Object(N.a)(ba,{mdxType:"SplitString"})," and ",Object(N.a)(ja,{mdxType:"JoinString"})," strings in this question.\nEssentially, this allows us to treat the string like an array so that we can more easily sort and iterate it."),Object(N.a)("p",null,"Finally, we return the values of the hash table inside an array to yield our result."),Object(N.a)(ia,{mdxType:"SolutionCode"}),Object(N.a)(ca.a,{mdxType:"ComplexitySubtitle"}),Object(N.a)("p",null,Object(N.a)(Y.a.n,{letter:"n x clogc"})," time and ",Object(N.a)(Y.a.n,{letter:"n x c"})," space."),Object(N.a)("p",null,Object(N.a)("inlineCode",{parentName:"p"},"n")," is the number of words in our input array, and ",Object(N.a)("inlineCode",{parentName:"p"},"c")," is the worst case length of characters for a string."),Object(N.a)("p",null,"Since we don't know the size of ",Object(N.a)("inlineCode",{parentName:"p"},"n")," or ",Object(N.a)("inlineCode",{parentName:"p"},"c"),", we must include both in our complexity analysis."),Object(N.a)("p",null,"The Big O complexity analysis of this solution requires some thought.\nFor the time complexity, we iterate all ",Object(N.a)("inlineCode",{parentName:"p"},"n")," items of our array.\nThen for each item in the array, we perform ",Object(N.a)(Y.a.n,{letter:"c"})," operations to determine if it is a palindrome.\nWe also sort the string which is ",Object(N.a)(Y.a.nlogn,{letter:"c"})," which is more significant than ",Object(N.a)(Y.a.n,{letter:"c"}),", so we drop the smaller term."),Object(N.a)("p",null,"For the space complexity, we create a hash map of strings for all the words.\nThe amount of memory required in our hash table is the number of strings times the number of characters."),Object(N.a)(sa.a,{mdxType:"VariationsSubtitle"}),Object(N.a)("p",null,"This question is actually on the more difficult end of permutation/palindrome problems.\nPieces of this problem could be asked in a simpler manner:"),Object(N.a)("ul",null,Object(N.a)("li",{parentName:"ul"},"Group permutations"),Object(N.a)("li",{parentName:"ul"},"Determine if a string can form a palindrome"),Object(N.a)("li",{parentName:"ul"},"Determine if 2 strings are permutations of each other"),Object(N.a)("li",{parentName:"ul"},"Determine if a string is a permutation of a palindrome")),Object(N.a)(oa.a,{mdxType:"LearningOutcomesSubtitle"}),Object(N.a)(ma,{mdxType:"LearningOutcomes"}))}ha.isMDXComponent=!0;var ga=ha,fa={};function ya(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},fa,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(N.a)("span",{parentName:"code",className:"token function"},"groupPermutationsOfPalindromes"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"strings"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token comment"},"// Your solution here"),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n")))}ya.isMDXComponent=!0;var wa=Object(b.a)({},u.a.Javascript,c.createElement(ya,null)),va=function(a){return wa[a]},xa={};function Ta(a){var e=a.components,t=Object(m.a)(a,["components"]);return Object(N.a)("wrapper",Object(n.a)({},xa,t,{components:e,mdxType:"MDXLayout"}),Object(N.a)("pre",{className:"language-javascript"},Object(N.a)("code",{parentName:"pre",className:"language-javascript"},Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," tests ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'empty input'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'acerrac'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'aaccerr'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'aan'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'bob'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'aaccerr'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'acerrac'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'aan'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'bob'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'input only palindromes'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'obb'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'obb'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'input single item groups'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    input",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'acerrac'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'aaccerr'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'aan'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'todo'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'doto'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'code'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'bob'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'aaccerr'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'acerrac'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'racecar'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'aan'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'naa'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token string"},"'bob'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n    description",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token string"},"'input palindromes and non-palindromes'"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},","),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(N.a)("span",{parentName:"code",className:"token function-variable function"},"sortOutputArray")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"a",Object(N.a)("span",{parentName:"span",className:"token punctuation"},",")," b"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," a",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"-")," b",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," ",Object(N.a)("span",{parentName:"code",className:"token function-variable function"},"validate")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},Object(N.a)("span",{parentName:"span",className:"token punctuation"},"{")," input",Object(N.a)("span",{parentName:"span",className:"token punctuation"},",")," expected",Object(N.a)("span",{parentName:"span",className:"token punctuation"},",")," description ",Object(N.a)("span",{parentName:"span",className:"token punctuation"},"}")),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," userAnswer ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token function"},"groupPermutationsOfPalindromes"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"input",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"userAnswer",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token property-access"},"length")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"!==")," expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token property-access"},"length"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{")," passed",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token boolean"},"false"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," description",Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," userAnswer ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"userAnswer",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token property-access"},"length")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"===")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"&&")," expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token property-access"},"length")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"===")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{")," passed",Object(N.a)("span",{parentName:"code",className:"token punctuation"},":")," ",Object(N.a)("span",{parentName:"code",className:"token boolean"},"true"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," description",Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," userAnswer ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," sortedUserAnswer ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," userAnswer",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"map"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token parameter"},"item")," ",Object(N.a)("span",{parentName:"code",className:"token arrow operator"},"=>")," item",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"sort"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token method function property-access"},"sort"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"sortOutputArray",Object(N.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"let")," passed ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token boolean"},"true"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token keyword"},"let")," i ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";")," i ",Object(N.a)("span",{parentName:"code",className:"token operator"},"<")," sortedUserAnswer",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token property-access"},"length"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";")," i",Object(N.a)("span",{parentName:"code",className:"token operator"},"++"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," uai ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," sortedUserAnswer",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"i",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"const")," eai ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"i",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n    ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"for")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(N.a)("span",{parentName:"code",className:"token keyword"},"let")," j ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token number"},"0"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";")," j ",Object(N.a)("span",{parentName:"code",className:"token operator"},"<")," uai",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(N.a)("span",{parentName:"code",className:"token property-access"},"length"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";")," j",Object(N.a)("span",{parentName:"code",className:"token operator"},"++"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"if")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"("),"uai",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"j",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]")," ",Object(N.a)("span",{parentName:"code",className:"token operator"},"!==")," eai",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"["),"j",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n        passed ",Object(N.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(N.a)("span",{parentName:"code",className:"token boolean"},"false"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n      ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n    ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n  ",Object(N.a)("span",{parentName:"code",className:"token keyword"},"return")," ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"{")," passed",Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," description",Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," expected",Object(N.a)("span",{parentName:"code",className:"token punctuation"},",")," userAnswer ",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n",Object(N.a)("span",{parentName:"code",className:"token punctuation"},"}"),Object(N.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n")))}Ta.isMDXComponent=!0;var Ca=Object(b.a)({},u.a.Javascript,c.createElement(Ta,null)),Da=function(a){return Ca[a]},Xa={segments:[{name:"Introduction",startTimeSeconds:0,endTimeSeconds:11},{name:"Question Prompt",startTimeSeconds:11,endTimeSeconds:58},{name:"Term Definitions",startTimeSeconds:58,endTimeSeconds:102},{name:"Solution Breakdown",startTimeSeconds:102,endTimeSeconds:744},{name:"Solution Summary and Big O",startTimeSeconds:744,endTimeSeconds:853},{name:"Code Walkthrough",startTimeSeconds:853,endTimeSeconds:1209}]},Sa=function(a){var e=a.hasLessonAccess;return c.createElement(p.a,Object(n.a)({},a,{Introduction:M,QuestionStatement:D,Solution:e?ga:r.a,LearningOutcomes:e?ma:null,validationItems:z,explanationItems:e?na:[],getUserAnswer:va,getTests:e?Da:r.b,getSolutionCode:e?ia:r.b,video:Xa}))},Ma=!0;e.default=Object(s.a)((function(a){return c.useEffect((function(){a.lesson&&"ACTIVE"===a.lesson.status||(window.location.href="/course")}),[a]),a.lesson&&"ACTIVE"===a.lesson.status?c.createElement(o.a,Object(n.a)({},a,{Component:Sa})):null}),{ssr:!1})},e5Rh:function(a,e,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/course/group-permutations-of-palindromes",function(){return t("P1t7")}])},jDXR:function(a,e,t){"use strict";var n=t("q1tI"),c=function(a){var e=a.children;return n.createElement("h2",null,e)};e.a=c}},[["e5Rh",0,1,4,6,5,9,12,11,13,14,15,18,17,21,2,3,7,8,10,16,19,22,23,24]]]);