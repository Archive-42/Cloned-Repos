_N_E=(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[112],{"/lAk":function(e,a,t){"use strict";t.r(a),t.d(a,"__N_SSG",(function(){return g}));var n=t("wx14"),c=t("q1tI"),s=t("NoRJ"),o=t("Qovc"),r=t("ekJs"),p={segments:[{name:"Introduction",startTimeSeconds:0,endTimeSeconds:8},{name:"DFS vs. BFS in Trees",startTimeSeconds:8,endTimeSeconds:96},{name:"Overview of Traversing Trees",startTimeSeconds:96,endTimeSeconds:238},{name:"In-Order Traversal",startTimeSeconds:238,endTimeSeconds:371},{name:"Pre-Order Traversal",startTimeSeconds:371,endTimeSeconds:412},{name:"Post-Order Traversal",startTimeSeconds:412,endTimeSeconds:463},{name:"BFS",startTimeSeconds:463,endTimeSeconds:571}]},m=t("Ff2n"),u=t("7ljp"),i=(t("YFqc"),t("uk0T"),t("jDXR")),d=t("jkan"),l=(t("7dQm"),t("93Pr")),N=(t("aH0L"),t("hqMp"),t("gA/7")),b=t("rePB"),j=t("Utoj"),O=t("Jpar"),k={};function h(e){var a=e.components,t=Object(m.a)(e,["components"]);return Object(u.a)("wrapper",Object(n.a)({},k,t,{components:a,mdxType:"MDXLayout"}),Object(u.a)("pre",{className:"language-javascript"},Object(u.a)("code",{parentName:"pre",className:"language-javascript"},Object(u.a)("span",{parentName:"code",className:"token comment"},"// Using a dynamic array as a queue"),"\n",Object(u.a)("span",{parentName:"code",className:"token comment"},"// unshift == enqueue"),"\n",Object(u.a)("span",{parentName:"code",className:"token comment"},"// pop == dequeue"),"\n",Object(u.a)("span",{parentName:"code",className:"token keyword"},"function")," ",Object(u.a)("span",{parentName:"code",className:"token function"},"breadthFirstSearch"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(u.a)("span",{parentName:"code",className:"token parameter"},"root"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n  ",Object(u.a)("span",{parentName:"code",className:"token keyword"},"let")," currentNode ",Object(u.a)("span",{parentName:"code",className:"token operator"},"=")," root",Object(u.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n  ",Object(u.a)("span",{parentName:"code",className:"token keyword"},"let")," queue ",Object(u.a)("span",{parentName:"code",className:"token operator"},"=")," ",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"["),"currentNode",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"]"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n  ",Object(u.a)("span",{parentName:"code",className:"token keyword"},"while"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),"queue",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token property-access"},"length")," ",Object(u.a)("span",{parentName:"code",className:"token operator"},">")," ",Object(u.a)("span",{parentName:"code",className:"token number"},"0"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n    currentNode ",Object(u.a)("span",{parentName:"code",className:"token operator"},"=")," queue",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token method function property-access"},"pop"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),Object(u.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n\n    ",Object(u.a)("span",{parentName:"code",className:"token function"},"visitNode"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),"currentNode",Object(u.a)("span",{parentName:"code",className:"token punctuation"},")"),"\n\n    ",Object(u.a)("span",{parentName:"code",className:"token keyword"},"if"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),"currentNode",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token property-access"},"left")," ",Object(u.a)("span",{parentName:"code",className:"token operator"},"!==")," ",Object(u.a)("span",{parentName:"code",className:"token keyword null nil"},"null"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      queue",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token method function property-access"},"unshift"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),"currentNode",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token property-access"},"left"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n\n    ",Object(u.a)("span",{parentName:"code",className:"token keyword"},"if"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),"currentNode",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token property-access"},"right")," ",Object(u.a)("span",{parentName:"code",className:"token operator"},"!==")," ",Object(u.a)("span",{parentName:"code",className:"token keyword null nil"},"null"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},")")," ",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"{"),"\n      queue",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token method function property-access"},"unshift"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},"("),"currentNode",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"."),Object(u.a)("span",{parentName:"code",className:"token property-access"},"right"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},")"),Object(u.a)("span",{parentName:"code",className:"token punctuation"},";"),"\n    ",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n  ",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n",Object(u.a)("span",{parentName:"code",className:"token punctuation"},"}"),"\n")))}h.isMDXComponent=!0;var f=Object(b.a)({},j.a.Javascript,c.createElement(h,null)),v=Object(O.a)(f),w={};function y(e){var a=e.components,t=Object(m.a)(e,["components"]);return Object(u.a)("wrapper",Object(n.a)({},w,t,{components:a,mdxType:"MDXLayout"}),Object(u.a)(l.b,{mdxType:"Section"},Object(u.a)("p",null,"There are two methods to traverse trees: depth-first search (DFS) and breadth-first search (BFS)."),Object(u.a)("p",null,"DFS is the most common way, and it is performed by traversing to the leaf nodes.\nIt goes as deep as it can and then moves on to the next branch.\nDFS is implemented using a stack or recursion."),Object(u.a)("p",null,"BFS on the other hand traverse the tree by level and can also be called level-order traversal.\nSo it will go all the way through level 1, then level 2, and follow this path until it reaches the last level.\nBFS is used to find the shortest path to a node."),Object(u.a)(d.a,{src:"/images/tree-dfs-vs-bfs.gif",mdxType:"Image"}),Object(u.a)("p",null,"DFS is much more common with trees, so we will discuss how it's done here, and then discuss DFS vs. BFS in more depth in the graph data structure section."),Object(u.a)("p",null,"There are three ways to traverse a tree using DFS: in-order traversal, pre-order traversal, and post-order traversal.\nEach of these implementations are DFS and explore down a path fully.\nThe only difference is the order in which they use the current node's data."),Object(u.a)("p",null,"In this article, we'll use the recursive solution to teach the concept because it is the best for gaining the initial intuition, and then in the interview questions, you'll get exposure to the iterative solutions as well.")),Object(u.a)(l.b,{mdxType:"Section"},Object(u.a)(N.a,{mdxType:"Traversal"})),Object(u.a)(l.b,{mdxType:"Section"},Object(u.a)(i.a,{mdxType:"SubsectionHeader"},"Breadth-First Search"),Object(u.a)("p",null,"With breadth-first search (BFS) you use a queue data structure instead of a stack.\nIt traverses across each level before going deeper into the graph."),Object(u.a)("blockquote",null,Object(u.a)("p",{parentName:"blockquote"},"We'll explore BFS further in the graph section as well.")),Object(u.a)(d.a,{src:"/images/tree-bfs.png",mdxType:"Image"}),Object(u.a)(v,{mdxType:"BFS"})))}y.isMDXComponent=!0;var S=function(e){return c.createElement(r.a,Object(n.a)({},e,{Content:y,video:p}))},g=!0;a.default=Object(o.a)((function(e){return c.useEffect((function(){e.lesson&&"ACTIVE"===e.lesson.status||(window.location.href="/course")}),[e]),e.lesson&&"ACTIVE"===e.lesson.status?c.createElement(s.a,Object(n.a)({},e,{Component:S})):null}),{ssr:!1})},AgfK:function(e,a,t){"use strict";var n=t("q1tI"),c=t("tGWw");a.a=function(){return Object(n.useContext)(c.a)}},Jpar:function(e,a,t){"use strict";var n=t("q1tI"),c=t("iD9/");a.a=function(e,a){var t=function(e){return a?function(e,a){return a.options.includes(e)?e:a.default}(e,a):e},s=function(a){return e[t(a)||a]};return function(){return n.createElement(c.a,{code:s,getLanguageUsed:t})}}},"PY+Y":function(e,a,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/course/tree-traversal-in-order-pre-order-post-order",function(){return t("/lAk")}])},"iD9/":function(e,a,t){"use strict";var n=t("q1tI"),c=t("gWsq"),s=t("AgfK"),o=function(e){var a=e.code,t=Object(s.a)().language;return n.createElement(c.h,null,a(t))};a.a=o}},[["PY+Y",0,1,4,6,5,9,12,11,13,14,15,18,17,2,3,7,8,10,16,19,20,34]]]);