const self = this;
self.URL = self.URL || self.webkitURL;
self.requestFileSystem = self.requestFileSystem || self.webkitRequestFileSystem;
self.resolveLocalFileSystemURL = self.resolveLocalFileSystemURL || self.webkitResolveLocalFileSystemURL;
self.BlobBuilder = self.BlobBuilder || self.MozBlobBuilder || self.WebKitBlobBuilder;
const Util = {
    toArray( a ) {
      return Array.prototype.slice.call( a || [], 0 )
    },
    strToDataURL( a, e, b ) {
      return ( void 0 != b ? b : 1 ) ? "data:" + e + ";base64," + self.btoa( a ) : "data:" + e + "," + a
    },
    strToObjectURL( a, e ) {
      for ( var b = new Uint8Array( a.length ), d = 0; d < b.length; ++d ) b[ d ] = a.charCodeAt( d );
      d = new BlobBuilder;
      d.append( b.buffer );
      b = e ? d.getBlob( e ) : d.getBlob();
      return self.URL.createObjectURL( b )
    },
    fileToObjectURL( a ) {
      return self.URL.createObjectURL( a )
    },
    fileToArrayBuffer( a, e, b ) {
      const d = new FileReader;
      d.onload = a => {
        e( a.target.result )
      };
      d.onerror = a => {
        b && b( a )
      };
      d.readAsArrayBuffer( a )
    },
    arrayBufferToBlob( a, e ) {
      const b = new BlobBuilder;
      b.append( a );
      return e ? b.getBlob( e ) : b.getBlob()
    },
    arrayBufferToBinaryString( a, e, b ) {
      const d = new FileReader;
      d.onload = a => {
        e( a.target.result )
      };
      d.onerror = a => {
        b && b( a )
      };
      const j = new BlobBuilder;
      j.append( a );
      d.readAsBinaryString( j.getBlob() )
    },
    arrayToBinaryString( a ) {
      if ( "object" != typeof a ) return null;
      for ( var e = a.length, b = Array( e ); e--; ) b[ e ] =
        String.fromCharCode( a[ e ] );
      return b.join( "" )
    },
    getFileExtension( a ) {
      const e = a.lastIndexOf( "." );
      return -1 != e ? a.substring( e ) : ""
    }
  },
  MyFileError = function ( a ) {
    this.prototype = FileError.prototype;
    this.code = a.code;
    this.name = a.name
  };
FileError.BROWSER_NOT_SUPPORTED = 1E3;
FileError.prototype.__defineGetter__( "name", function () {
  for ( let a = Object.keys( FileError ), e = 0, b; b = a[ e ]; ++e )
    if ( FileError[ b ] == this.code ) return b;
  return "Unknown Error"
} );
const Filer = new( () => {
  class a {
    constructor( c ) {
      if ( e = c || null ) b = e.root, d = !0
    }
    get fs() {
      return e
    }
    get isOpen() {
      return d
    }
    pathToFilesystemURL( c ) {
      return k( c )
    }

    init( c, a, h ) {
      if ( !self.requestFileSystem ) throw new MyFileError( {
        code: FileError.BROWSER_NOT_SUPPORTED,
        name: "BROWSER_NOT_SUPPORTED"
      } );
      const c = c ? c : {},
        f = c.size || 1048576;
      this.type = self.TEMPORARY;
      if ( "persistent" in c && c.persistent ) this.type = self.PERSISTENT;
      self.requestFileSystem( this.type, f, c => {
        this.size = f;
        e = c;
        b = e.root;
        d = !0;
        a && a( c )
      }, h )
    }

    ls( c, a, h ) {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      const f = c => {
        b = c;
        let e = [];
        const f = b.createReader();

        const d = () => {
          f.readEntries( c => {
              c.length ? ( e = e.concat( Util.toArray( c ) ), d() ) : ( e.sort( ( c, a ) => {
                return c.name < a.name ? -1 : a.name < c.name ? 1 : 0
              } ), a( e ) )
            },
            h )
        };

        d()
      };
      c.isDirectory ? f( c ) : j( c ) ? l( f, k( c ), h ) : b.getDirectory( c, {}, f, h )
    }

    mkdir( c, a, d, f ) {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      const g = null != a ? a : !1,
        j = c.split( "/" ),
        i = ( a, b ) => {
          if ( "." == b[ 0 ] || "" == b[ 0 ] ) b = b.slice( 1 );
          a.getDirectory( b[ 0 ], {
            create: !0,
            exclusive: g
          }, a => {
            if ( a.isDirectory ) b.length && 1 != j.length ? i( a, b.slice( 1 ) ) : d( a );
            else if ( a = Error( c + " is not a directory" ), f ) f( a );
            else throw a;
          }, a => {
            if ( a.code == FileError.INVALID_MODIFICATION_ERR )
              if ( a.message =
                "'" + c + "' already exists", f ) f( a );
              else throw a;
          } )
        };
      i( b, j )
    }

    open( a, b, d ) {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      a.isFile ? a.file( b, d ) : l( a => {
        a.file( b, d )
      }, k( a ), d )
    }
    create( a, d, h, f ) {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      b.getFile( a, {
        create: !0,
        exclusive: null != d ? d : !0
      }, h, b => {
        if ( b.code == FileError.INVALID_MODIFICATION_ERR ) b.message = "'" + a + "' already exists";
        if ( f ) f( b );
        else throw b;
      } )
    }
    mv( a, b, e, f, d ) {
      n.bind( this, a, b, e, f, d, !0 )()
    }
    rm( a, b, d ) {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      const f = a => {
        a.isFile ? a.remove( b, d ) : a.isDirectory && a.removeRecursively( b, d )
      };
      a.isFile || a.isDirectory ? f( a ) : l( f, a, d )
    }
    cd( a, d, h ) {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      a.isDirectory ? ( b = a, d && d( b ) ) : ( a = k( a ), l( a => {
        if ( a.isDirectory ) b = a, d && d( b );
        else if ( a = Error( "Path was not a directory." ), h ) h( a );
        else throw a;
      }, a, h ) )
    }
    cp( a, b, e, d, g ) {
      n.bind( this, a, b, e, d, g )()
    }
    write( a, d, h, f ) {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      const g = a => {
        a.createWriter( b => {
          b.onerror = f;
          if ( d.append ) b.onwriteend = function () {
            h( a, this )
          }, b.seek( b.length );
          else {
            let c = !1;
            b.onwriteend = function () {
              c ? h( a, this ) : ( c = !0, this.truncate( this.position ) )
            }
          }
          const e = new BlobBuilder;
          e.append( d.data );
          b.write( d.type ? e.getBlob( d.type ) : e.getBlob() )
        }, f )
      };
      a.isFile ? g( a ) : j( a ) ? l( g, a, f ) : b.getFile( a, {
        create: !0,
        exclusive: !1
      }, g, f )
    }
  }

  var e = null,
    b = null,
    d = !1,
    j = c => {
      return 0 == c.indexOf( "filesystem:" )
    },
    k = c => {
      j( c ) || ( c = "/" == c[ 0 ] ? e.root.toURL() + c.substring( 1 ) : 0 == c.indexOf( "./" ) || 0 == c.indexOf( "../" ) ? "../" == c && b != e.root ? b.toURL() + "/" + c : b.toURL() + c : b.toURL() + "/" + c );
      return c
    },
    l = function ( c, a, b ) {
      const f = arguments[ 1 ],
        e = arguments[ 2 ],
        d = c => {
          if ( b ) b( c );
          else {
            if ( c.code == FileError.NOT_FOUND_ERR ) {
              if ( e ) throw Error( '"' + f + '" or "' + e + '" does not exist.' );
              throw Error( '"' +
                f + '" does not exist.' );
            }
            throw Error( "Problem getting Entry for one or more paths." );
          }
        },
        i = k( f );
      if ( 3 == arguments.length ) {
        const m = k( e );
        self.resolveLocalFileSystemURL( i, a => {
          self.resolveLocalFileSystemURL( m, b => {
            c( a, b )
          }, d )
        }, d )
      } else self.resolveLocalFileSystemURL( i, c, d )
    },
    n = ( c, a, b, f, g, d ) => {
      if ( !e ) throw Error( "Filesystem has not been initialized." );
      if ( typeof c != typeof a ) throw Error( "These method arguments are not supported." );
      const i = b || null,
        m = void 0 != d ? d : !1;
      ( c.isFile || a.isDirectory ) && a.isDirectory ?
        m ? c.moveTo( a, i, f, g ) : c.copyTo( a, i, f, g ) : l( ( c, a ) => {
          if ( a.isDirectory ) m ? c.moveTo( a, i, f, g ) : c.copyTo( a, i, f, g );
          else {
            const b = Error( 'Oops! "' + a.name + " is not a directory!" );
            if ( g ) g( b );
            else throw b;
          }
        }, c, a, g )
    };
  a.DEFAULT_FS_SIZE = 1048576;
  return a
} );
